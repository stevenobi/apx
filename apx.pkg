set define off
--------------------------------------------------------------------------------
--
-- Title: apx.pkg (APEX MAIN PACKAGE)
--
-- Description: PL/SQL Package to provide an interface to subprocedures and functions.
--
-- Parameters: None
--
-- Requirements (see required section for implementation):
-- apxkey function, APX$APP_USER_SESSION table, APEX_APP_USER_SESSION view
--
-- Compatible: validated against Oracle 12c.
-- Lower versions are partly supported but it's not guaranteed to stay that way.
--
-- The User compiling this Package must have at least the following privileges:
--   RESOURCE and CONNECT Roles
--   APEX_ADMINISTRATOR_ROLE
--   select on "SYS"."V_$INSTANCE" and DBA_REGISTRY
--   create for views, tables, packages and synonyms
--
-- -- Example for User APXDBA:
--
--    GRANT "CONNECT" TO "APXDBA";
--    GRANT "RESOURCE" TO "APXDBA";
--    GRANT "APEX_ADMINISTRATOR_ROLE" TO "APXDBA";
--
--    GRANT SELECT ON "SYS"."V_$INSTANCE" TO "APXDBA";
--    GRANT SELECT ON "SYS"."DBA_REGISTRY" TO "APXDBA";
--    GRANT EXECUTE ON "SYS"."DBMS_CRYPTO" TO "APXDBA";
--    GRANT DEBUG CONNECT SESSION TO "APXDBA";
--    GRANT DEBUG ANY PROCEDURE TO "APXDBA";
--    GRANT CREATE VIEW TO "APXDBA";
--    GRANT CREATE TABLE TO "APXDBA";
--    GRANT CREATE TRIGGER TO "APXDBA";
--    GRANT CREATE PROCEDURE TO "APXDBA";
--    GRANT CREATE PUBLIC SYNONYM TO "APXDBA";
--
-- -----------------------------------------------------------------------------
-- History:      12.09.2007 SO: created
--               29.01.2017 SO: refactored for APEX
--               12.02.2017 SO: integrated in new Git Repository APX
--               20.11.2017 SO: outfactored encryption to interfaces, session mgmt
--
-- Disclaimer: the software is delivered "as-is", and the author takes
-- no responsiblity nor guarantee for the proper function of this script
-- nor for any damages or misfunctions that occure from using this software.
--
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- required objects and interfaces
--------------------------------------------------------------------------------


-- Apex User Session Tables and Views
/*
-- Cleanup
drop view "APEX_APP_USER_SESSION";
drop sequence "APX$APP_USERSESS_SEQ";
drop trigger "APX$APP_USERSESS_BI_TRG";
drop table "APX$APP_USER_SESSION" purge;


create table "APX$APP_USER_SESSION" (
app_user_session_id number not null primary key,
app_username varchar2(64) not null,
app_user_email varchar2(64),
app_id number,
app_ws_id number,
app_user_pwd varchar2(64),
app_user_cookie_name varchar2(64),
app_user_last_page number,
app_user_last_login timestamp default current_timestamp,
app_user_last_logout timestamp default null,
app_user_session_seconds number default 28800, -- 8 hrs.
app_user_session_idle_sec number default 900 -- 15 min.
);

create sequence "APX$APP_USERSESS_SEQ" start with 1 increment by 1 nocache;

create or replace trigger "APX$APP_USERSESS_BI_TRG"
before insert on "APX$APP_USER_SESSION"
referencing old as old new as new
for each row
begin
  if (:new.app_user_session_id is null) then
      select "APX$APP_USERSESS_SEQ".nextval
      into :new.app_user_session_id
      from dual;
  end if;
  select current_timestamp, nvl(v('APP_USER'), user)
  into :new.app_user_last_login, :new.app_username
  from dual;
end;
/

-- Apex User Sessions (requires: "APX$APP_USER_SESSION" table)
create or replace view "APEX_APP_USER_SESSION"
as
select app_user_session_id,
  app_username,
  app_user_email,
  app_id,
  app_ws_id,
  app_user_last_login,
  app_user_last_logout,
  trunc(app_session_duration) as app_session_duration_seconds,
  nvl(nullif(app_user_session_seconds,0), trunc(app_session_duration)) -
  trunc(app_session_duration) as app_session_remaining_seconds,
  case when app_session_duration <= app_user_session_seconds
          then 'Y'
          else 'N'
  end as app_session_is_current
from (
select app_user_session_id,
  app_username,
  app_user_email,
  app_id,
  app_ws_id,
  app_user_pwd,
  app_user_last_login,
  app_user_last_logout,
  app_user_session_seconds ,
  trunc((cast(current_timestamp as date) - date '1970-01-01')*24*60*60) as now,
  ((cast(app_user_last_login as date) - date '1970-01-01')*24*60*60) as login_second,
  trunc((cast(current_timestamp as date) - date '1970-01-01')*24*60*60) -
  ((cast(app_user_last_login as date) - date '1970-01-01')*24*60*60) as app_session_duration
from  "APX$APP_USER_SESSION"
);

-- Encryption key wrapped
create or replace function apxkey wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
be f7
WqX4PVV3F1X4nIQXM02Si0QUJU8wg2Lw7cusfI5gkPiOvx1h+ZnTByUZJwteWWurSYaPXQZN
ICB8X5qh/zrPoZ/LC6zG+E4jP2sbwfi9IOt6yUbIj+DCAOxHr2t4bP/I8l8aN1/H+r3CvvF8
86lTVNnYRCAjZY+oFMIlVRzF9YnLh/IFa2ifcbiWiHuVo7tuGQmae22gPXEws3sbAsLy3tS+
UEeCC1w9t4Gbmoq9G7EgP3pz0Ws=

/


*/

------------------------------------------------------------------

-- Standard Procedures and Functions are defined in this Package
-- and used by APX Packages Scripts and other processes.
-- This Package is intended to run standalone and provide a hub
-- for all Sub Packages and Procedures.
--
-- Common Functions and Procedures are made public by creating
-- standalone Procedures and Functions that server as an interface
-- to those commeon objects.
--
-- This is planned to make Migration and Renaming easier, since you
-- just need to update the reference in the wrapper to make things
-- work again;-). To make sure these wrappers are in place, this
-- package checks them at startup (see init) und creates them as needed.
-- We keep basic logging and debugging Functions in here
-- to avoid the henn-egg problem of logging/debugging this package,
-- if its the only one in place (which it is in mimimal configuration:-)

------------------------------------------------------------------
--                          Package Specification
------------------------------------------------------------------
CREATE OR REPLACE PACKAGE "APX" AUTHID CURRENT_USER
IS

------------------------------------------------------------------
-- Global Variables, REF_CURSORS and Types
------------------------------------------------------------------

-- names of objects (tables, views... usually 30 bytes)
SUBTYPE objname IS ALL_OBJECTS.SUBOBJECT_NAME%TYPE;

-- generic weak REF CURSOR (no RETURN Clause)
TYPE curtype IS REF CURSOR;

-- globals
g_debug boolean;

-- app sso
ssomaster number := 1000;

g_txt varchar2(4000);
g_dat date;
g_int pls_integer;
g_num number;

-- status output
c_ok CONSTANT VARCHAR2(5) := 'OK.';
c_fld CONSTANT VARCHAR2(10) := 'failed!';
c_con CONSTANT VARCHAR2(20) := 'connected';
c_discon CONSTANT VARCHAR2(20) := 'disconnected';

-- padding
c_pad CONSTANT PLS_INTEGER := 85;

-- name of this package
l_pkg objname := 'APX';

-- Step Markers for Debug
l_stepname objname := 'null';
l_step pls_integer := 0;
l_step_comment varchar2(1000);
l_str varchar2(4000);
l_apxcon varchar2(100);

-- APEX Session
p_session_id varchar2(512);
p_app_id number;
p_ws_id number;
p_user_id number;

-- majorversion of current instance
db_version PLS_INTEGER;

-- majorversion of current APEX instance
apx_version PLS_INTEGER;

-- print_pretty_line counter
ppl_cnt PLS_INTEGER := 0;

-- print_pretty_line_length
ppl_len PLS_INTEGER := 0;

------------------------------------------------------------------
-- Package Procedures and Functions
------------------------------------------------------------------

------------------------------------------------------------------
-- Setter and Getter Procedures and Functions
-- are used to set and get global variable values
-- Overloaded to support real types (char, int, date)
------------------------------------------------------------------

PROCEDURE "SETVAL" (
p_variable in varchar2,
p_value in varchar2,
p_initialize in boolean := false);


FUNCTION "GETVAL" (
p_variable in varchar2,
p_initialize in boolean := false)
return varchar2;

------------------------------------------------------------------
-- Encryption Procedure
-- for Credential Management
------------------------------------------------------------------

-- Encrypt VARCHAR2 & return RAW
function "ENCRYPT" (
input_string       VARCHAR2
) return raw;


------------------------------------------------------------------
-- Apex Environment
------------------------------------------------------------------

-- Get Workspace ID by Workspacename
function "GETWSID" (
p_ws_name apex_workspaces.workspace%type
) return apex_workspaces.workspace_id%type;

-- Get Workspace ID by Applicationname
function "GETWSID" (
p_app_id apex_applications.application_id%type
) return apex_workspaces.workspace_id%type;


-- Get Workspacename by Workspace ID
function "GETWS" (
p_app_id apex_applications.application_id%type,
p_ws_id apex_workspaces.workspace_id%type default null
) return apex_workspaces.workspace%type;


-- Get Application ID by Applicationname
function "GETAPPID" (
p_app_name apex_applications.application_name%type
) return apex_applications.application_id%type;


-- Get Applicationame by Application ID
function "GETAPP" (
p_app_id apex_applications.application_id%type
) return apex_applications.application_name%type;


-- Get the main APEX Database Schema (Owner of the API)
function "GETAPEXOWNER"
return apex_applications.owner%type;


-- redirect to a given URL
procedure "REDIRECT" (
p_url in varchar2
);


------------------------------------------------------------------
-- DBMS_OUTPUT Limitations:
--
-- Oracle 9i:
--  Errors raised:
--  ORU-10027: buffer overflow, limit of <buf_limit> bytes.
--  ORU-10028:line length overflow, limit of 255 bytes

-- Oracle 10g:
--  Errors raised:
--  ORU-10027: buffer overflow, limit of <buf_limit> bytes.
--  ORU-10028:line length overflow, limit of 32767 bytes per line.

-- Note: Procedures assume LINESIZE 100 in SQL*Plus
------------------------------------------------------------------


------------------------------------------------------------------
-- PrintLine: Wrapper Procedure to DBMS_OUTPUT
-- avoids ORU-10028 Errors with lines larger 255 bytes (up until 9i)
-- adopted from Steven Feuerstein: PL/SQL Best Practices (B-01)
------------------------------------------------------------------
PROCEDURE "PL_PRINT_LINE" (
str_in IN VARCHAR2,
len_in IN INTEGER := 100,
expand_in IN BOOLEAN := TRUE);

------------------------------------------------------------------
-- PrintPrettyLine: Wrapper Procedure to DBMS_OUTPUT
-- see PrintLine for Description
-- added support for "pretty" line breaks at last blank of line.
------------------------------------------------------------------
PROCEDURE "PL_PRINT_PRETTY_LINE" (
str_in IN VARCHAR2,
len_in IN INTEGER := 100,
expand_in IN BOOLEAN := TRUE);

------------------------------------------------------------------
-- Wrapper Procedure to DBMS_OUTPUT for easier access
-- and extended functionality. Calls to pl and ppl are made from it.
------------------------------------------------------------------
PROCEDURE "PL_PRINT" (
str_in IN VARCHAR2,
len_in IN NUMBER DEFAULT 100,
p_line IN BOOLEAN DEFAULT TRUE, -- use put_line ?
c_padding IN NUMBER DEFAULT NULL, -- use rc_pad?
c_padchar IN CHAR DEFAULT '.',        -- character used for c_padding
print_pretty IN BOOLEAN := FALSE,  -- use PrintPretty for Linebreaks
expand_in IN BOOLEAN := TRUE);

------------------------------------------------------------------
-- Wrapper Procedures to HTP.PRN and HTP.PRINT for easier access
-- htp.print - a string terminated with a newline.
-- htp.prn - the specified string, not terminated with a newline.
-- Parameters: p_txt, p_date, p_int - the string to generate.
------------------------------------------------------------------

PROCEDURE "HT_PRINTN" (p_txt in varchar2);
PROCEDURE "HT_PRINTN" (p_date in date);
PROCEDURE "HT_PRINTN" (p_int in number);

PROCEDURE "HT_PRINT" (p_txt in varchar2);
PROCEDURE "HT_PRINT" (p_date in date);
PROCEDURE "HT_PRINT" (p_int in number);

------------------------------------------------------------------
-- Wrapper Procedures to HTP.PS and HTP.PRINTS for easier access
-- Both these subprograms generate a string and replace
-- the following characters with the corresponding escape sequence.
-- < to &lt;
-- > to &gt;
-- " to &quot;
-- & to &amp;
-- htp.prints an escaped string terminated with a newline.
-- htp.ps an escaped string not terminated with a newline.
-- Parameters: ctext - the string where to perform character substitution.
-- Generates: A string.
------------------------------------------------------------------

PROCEDURE "HT_PRINTS"(p_txt in varchar2);

PROCEDURE "HT_PS"(p_txt in varchar2);

------------------------------------------------------------------
-- Conversion Functions for special PL/SQL types
-- and extended functionality.
------------------------------------------------------------------

-- Conversion Functions for Booleans
FUNCTION "NUM_TO_BOOLEAN" (
  number_in IN NUMBER
, false_num IN NUMBER := 0 -- which value evaluates to false?
, operand IN VARCHAR2 := '>'
) RETURN BOOLEAN;

FUNCTION "BOOLEAN_TO_NUM" (
  boolean_in IN BOOLEAN
, true_num IN NUMBER := 1 -- which value is true?
) RETURN NUMBER;


END "APX";
/


------------------------------------------------------------------
--                          Package Body
------------------------------------------------------------------
CREATE OR REPLACE PACKAGE BODY "APX"
IS

------------------------------------------------------------------
-- Private Procedures and Functions
------------------------------------------------------------------
-- Encryption
num_key_bytes NUMBER := 256/8;        -- key length 256 bits (32 bytes)
key_bytes_raw RAW (32); -- stores 256-bit encryption key

-- Decrypt RAW & return VARCHAR2
function  "DECRYPT" (
p_encrypted_raw      RAW
) return varchar2
is
   output_string      VARCHAR2 (200);
   decrypted_raw      RAW (2000);             -- stores decrypted binary text
BEGIN
  --output_string := UTL_I18N.RAW_TO_CHAR (p_encrypted_raw, 'AL32UTF8');
  --DBMS_OUTPUT.PUT_LINE ( 'Input hash: ' || output_string);

  -- using interface "APX_ENCRYPT"
  output_string := "APX_DECRYPT"(p_encrypted_raw);

  --DBMS_OUTPUT.PUT_LINE ('Decrypted string: ' || output_string);
return  output_string;

exception when others then
--DBMS_OUTPUT.PUT_LINE ('Input hash: ' || output_string);
--DBMS_OUTPUT.PUT_LINE (sqlerrm);
return null;
END "DECRYPT";


--------------------------------------------------------------------------------
-- Public Procedures and Functions
--------------------------------------------------------------------------------

------------------------------------------------------------------
-- Encryption Procedure
-- for Credential Management
------------------------------------------------------------------

-- Encrypt VARCHAR2 & return RAW
function "ENCRYPT" (
input_string       VARCHAR2
) return raw
is
  output_string      VARCHAR2 (200);
  encrypted_raw      RAW (2000);             -- stores encrypted binary text
BEGIN
  --DBMS_OUTPUT.PUT_LINE ( 'Original string: ' || input_string);

  -- using interface "APX_ENCRYPT"
   encrypted_raw := "APX_ENCRYPT"(input_string);

   --output_string := UTL_I18N.RAW_TO_CHAR (encrypted_raw, 'AL32UTF8');
  --DBMS_OUTPUT.PUT_LINE ( 'Original string: ' || output_string);
return encrypted_raw;
exception when others then
--DBMS_OUTPUT.PUT_LINE ('Input hash: ' || output_string);
--DBMS_OUTPUT.PUT_LINE (sqlerrm);
return null;
end "ENCRYPT";

------------------------------------------------------------------
-- Apex Environment
------------------------------------------------------------------

-- Get Workspace ID by Workspacename
function "GETWSID" (
p_ws_name apex_workspaces.workspace%type
) return apex_workspaces.workspace_id%type
is
l_ws_id apex_workspaces.workspace_id%type;
begin
  select workspace_id
  into l_ws_id
  from apex_workspaces
  where upper(workspace) = upper(trim(p_ws_name));
return l_ws_id;
exception when others then
raise;
end "GETWSID";

-- Get Workspace ID by Applicationname
function "GETWSID" (
p_app_id apex_applications.application_id%type
) return apex_workspaces.workspace_id%type
is
l_ws_id apex_workspaces.workspace_id%type;
begin
  select workspace_id
  into l_ws_id
  from apex_workspaces
  where workspace = (
    select workspace
    from apex_applications
    where application_id = p_app_id);
return l_ws_id;
exception when others then
raise;
end "GETWSID";

-- Get Workspacename by Workspace ID
function "GETWS" (
p_app_id apex_applications.application_id%type,
p_ws_id apex_workspaces.workspace_id%type default null
) return apex_workspaces.workspace%type
is
l_ws apex_workspaces.workspace%type;
begin
  if p_ws_id is not null then -- we get the workspace_name by it's ID
    select workspace
    into l_ws
    from apex_workspaces
    where workspace_id = p_ws_id;
  else -- we get the workspace_name by getting the WS_ID for an Application ID (default)
    l_ws := getws(null, getwsid(p_app_id));
  end if;
return l_ws;
exception when others then
raise;
end "GETWS";


-- Get Application ID by Applicationname
function "GETAPPID" (
p_app_name apex_applications.application_name%type
) return apex_applications.application_id%type
is
l_app_id apex_applications.application_id%type;
begin
  select application_id
  into l_app_id
  from apex_applications
  where upper(application_name) = upper(trim(p_app_name));
return l_app_id;
exception when others then
raise;
end "GETAPPID";

-- Get Applicationame by Application ID
function "GETAPP" (
p_app_id apex_applications.application_id%type
) return apex_applications.application_name%type
is
l_app apex_applications.application_name%type;
begin
  select application_name
  into l_app
  from apex_applications
  where application_id = p_app_id;
return l_app;
exception when others then
raise;
end "GETAPP";

-- Get the main APEX Database Schema (Owner of the API)
function "GETAPEXOWNER"
return apex_applications.owner%type
is
  l_apex_owner apex_applications.owner%type;
begin
  select owner
  into l_apex_owner
  from apex_applications
  where WORKSPACE = 'INTERNAL'
  and rownum = 1;
return l_apex_owner;
exception when others then
raise;
end "GETAPEXOWNER";


-- redirect to a given URL
procedure "REDIRECT" (
p_url in varchar2
)
is
  l_url varchar2(4000);
begin
  l_url := sys.utl_url.escape ( url => p_url, escape_reserved_chars => false );
  sys.owa_util.redirect_url(l_url);
  apex_application.stop_apex_engine;
end "REDIRECT";


------------------------------------------------------------------
-- Setter and Getter Procedures and Functions
-- used to set and get global variable values
------------------------------------------------------------------

PROCEDURE "SETVAL" (
p_variable in varchar2,
p_value in varchar2,
p_initialize in boolean := false)
is
l_sql varchar2(4000);
begin
  -- set the string
  l_sql := 'begin '|| p_variable||':= :val ; end;';
  if (p_initialize) then -- the value gets pruned before
    execute immediate l_sql using in '';
    --dbms_output.put_line('apx.g_txt (in package): '||apx.g_txt); -- needed for testing
  end if;
  -- set value
  execute immediate l_sql using in p_value;
end;


FUNCTION "GETVAL" (
p_variable in varchar2,
p_initialize in boolean := false)
return varchar2
is
l_sql varchar2(4000);
l_value varchar2(4000);
begin
  -- set the string
  l_sql := 'begin :val :='|| p_variable||'; end;';
  -- get value
  execute immediate l_sql using out l_value;
  if (p_initialize) then -- the value gets pruned after
    setval(p_variable, null);
    dbms_output.put_line('apx.g_txt (in package): '||apx.g_txt); -- needed for testing
  end if;
  return l_value;
end;



------------------------------------------------------------------
-- Printing Output Procedures for Debug and Logging
------------------------------------------------------------------

-- print_line
PROCEDURE "PL_PRINT_LINE" (
str_in IN VARCHAR2,
len_in IN INTEGER := 100,
expand_in IN BOOLEAN := TRUE)
IS
len PLS_INTEGER;
str VARCHAR2(2000);
BEGIN
    -- set maximum chars/line
    IF (db_version < 10) THEN
        len  := LEAST (len_in, 255);
    ELSE
        len  := LEAST (len_in, 32767);
    END IF;

    IF (LENGTH (str_in) > len) THEN
        str := SUBSTR (str_in, 1, len);
        DBMS_OUTPUT.PUT_LINE (str);
        --recursive call of this procedure for remaining characters
        PL_PRINT_LINE (SUBSTR (str_in, len + 1), len, expand_in);
    ELSE
        str := str_in;
        DBMS_OUTPUT.PUT_LINE (str);
    END IF;
EXCEPTION WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE ('Execption in PL');
    IF expand_in THEN
       DBMS_OUTPUT.ENABLE (1000000);
    ELSE
       RAISE;
    END IF;
    DBMS_OUTPUT.PUT_LINE (str);
END;


-- print_pretty_line
PROCEDURE "PL_PRINT_PRETTY_LINE" (
str_in IN VARCHAR2,
len_in IN INTEGER := 100,
expand_in IN BOOLEAN := TRUE)
IS
len PLS_INTEGER := LEAST (len_in, 255);
str VARCHAR2(2000);
BEGIN
    -- set maximum chars/line
    IF (db_version < 10) THEN
        len  := LEAST (len_in, 255);
    ELSE
        len  := LEAST (len_in, 32767);
    END IF;

    IF (LENGTH (str_in) > len) THEN
        -- increment package variable ppl_cnt first
        ppl_cnt := ppl_cnt + 1;
        IF (ppl_cnt = 1) THEN -- first run, so set l_len
        -- len_in can change at runtime, so we need a constant value here.
            ppl_len := len_in;
        END IF;

        str := SUBSTR (str_in, 1, len);
        len := INSTR(str, ' ', -1, 1);
        str := SUBSTR (str, 1, INSTR(str, ' ', -1, 1));
        DBMS_OUTPUT.PUT_LINE (str);
        --recursive call of this procedure for remaining characters
        PL_PRINT_PRETTY_LINE (SUBSTR (str_in, len + 1), ppl_len, expand_in);
    ELSE
        str := str_in;
        DBMS_OUTPUT.PUT_LINE (str);
    END IF;
EXCEPTION WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE ('Execption in PPL');
    IF expand_in THEN
       DBMS_OUTPUT.ENABLE (1000000);
    ELSE
       RAISE;
    END IF;
    -- PUT_LINE Exceptions are handled in ppl or pl already
    DBMS_OUTPUT.PUT (str);
END;

-- PL/SQL Print
PROCEDURE "PL_PRINT" (
str_in IN VARCHAR2,
len_in IN NUMBER DEFAULT 100,
p_line IN BOOLEAN DEFAULT TRUE, -- use put_line ?
c_padding IN NUMBER DEFAULT NULL, -- use c_pad?
c_padchar IN CHAR DEFAULT '.',         -- character used for c_pad
print_pretty IN BOOLEAN := FALSE,  -- use PrintPretty for Linebreaks
expand_in IN BOOLEAN := TRUE)
IS
str VARCHAR2(2000);
max_line PLS_INTEGER;
BEGIN

    IF (c_padding IS NOT NULL) THEN
        str := RPAD(str_in, c_padding, c_padchar);
    ELSE
        str := str_in;
    END IF;

    IF (p_line) THEN
        IF (print_pretty) THEN
        --DBMS_OUTPUT.PUT_LINE ('Printing Pretty Line: '||str);
            PL_PRINT_PRETTY_LINE (str, len_in);
        ELSE
        --DBMS_OUTPUT.PUT_LINE ('Printing Line: '||str);
            PL_PRINT_LINE (str, len_in);
        END IF;
    ELSE
        DBMS_OUTPUT.PUT(str);
    END IF;
EXCEPTION WHEN OTHERS THEN
    IF expand_in THEN
       DBMS_OUTPUT.ENABLE (1000000);
    ELSE
       RAISE;
    END IF;
    -- PUT_LINE Exceptions are handled in pl_print_pretty_line or pl already
    DBMS_OUTPUT.PUT (str);
END;

------------------------------------------------------------------
-- Print Text Procedures (HTP.PRN and HTP.PRINT)
------------------------------------------------------------------

-- Print without newlines (classic print command)
PROCEDURE "HT_PRINT" (p_txt in varchar2)
is
  l_txt varchar2(4000);
begin
  l_txt := p_txt;
  htp.prn(l_txt);
end;

PROCEDURE "HT_PRINT" (p_date in date)
is
  l_date date;
begin
  l_date := p_date;
  htp.prn(l_date);
end;

PROCEDURE "HT_PRINT" (p_int in number)
is
  l_int number;
begin
  l_int := p_int;
  htp.prn(l_int);
end;

-- Print with newlines (classic printn command)
PROCEDURE "HT_PRINTN" (p_txt in varchar2)
is
  l_txt varchar2(4000);
begin
  l_txt := p_txt;
  htp.print(l_txt);
end;

PROCEDURE "HT_PRINTN" (p_date in date)
is
  l_date date;
begin
  l_date := p_date;
  htp.print(l_date);
end;

PROCEDURE "HT_PRINTN" (p_int in number)
is
  l_int number;
begin
  l_int := p_int;
  htp.print(l_int);
end;

------------------------------------------------------------------
-- Print Escaped Text Procedures (HTP.PS and HTP.PRINTS)
------------------------------------------------------------------

-- don't print newlines
PROCEDURE "HT_PS"(p_txt in varchar2)
is
  l_txt varchar2(4000);
begin
  l_txt := p_txt;
  htp.ps(l_txt);
end;

-- print newlines
PROCEDURE "HT_PRINTS" (p_txt in varchar2)
is
  l_txt varchar2(4000);
begin
  l_txt := p_txt;
  htp.prints(l_txt);
end;

------------------------------------------------------------------
-- Admin Functions (converters mostly)
------------------------------------------------------------------

-- convert number to a boolean
FUNCTION "NUM_TO_BOOLEAN" (
  number_in IN NUMBER
, false_num IN NUMBER := 0 -- which value evaluates to false?
, operand IN VARCHAR2 := '>'
) RETURN BOOLEAN
IS
retval BOOLEAN := FALSE;
BEGIN
    IF operand = '>' AND number_in > false_num THEN
        retval := TRUE;
    ELSIF operand = '=' AND number_in = false_num THEN
        retval := FALSE;
    ELSIF operand = '=' AND number_in != false_num THEN
        retval := TRUE;
    ELSIF operand = '<' AND number_in < false_num THEN
        retval := TRUE;
    END IF;
RETURN retval;
END;

-- convert boolean to a number
FUNCTION "BOOLEAN_TO_NUM" (
  boolean_in IN BOOLEAN
, true_num IN NUMBER := 1 -- which value is true?
) RETURN NUMBER
IS
retval NUMBER := 0;
BEGIN
    IF boolean_in THEN
        retval := true_num;
    END IF;
RETURN retval;
END;


------------------------------------------------------------------
-- Initialization Section
------------------------------------------------------------------
BEGIN
    l_stepname := 'INIT';

    ------------------------------------------------------------------
    -- Set Encryption key
    ------------------------------------------------------------------
    l_step := l_step + 1;
    l_step_comment := 'Set Encryption key';
    select apxkey into key_bytes_raw from dual;

    ------------------------------------------------------------------
    -- APEX Environment
    -- (set here to see if a session exists,
    --  else no more processing needed.)
    ------------------------------------------------------------------
    l_step := l_step + 1;
    l_step_comment := 'APEX Session ID';
    p_session_id := nvl(v('SESSION_ID'), c_discon);

    if (p_session_id != c_discon or g_debug) then -- a Session exists or we debug

       ------------------------------------------------------------------
       -- APEX Settings (Workspace ID/NAME, APP_ID, APP_USER,...)
       ------------------------------------------------------------------

      -- //TODO

       ------------------------------------------------------------------
       -- get current Database- and APEX Majorversion
       -- (set in here once to minimize depencies among packages)
       ------------------------------------------------------------------
      begin

      l_step := l_step + 1;
      l_step_comment := 'DB Version';
      db_version := "APX_GET_VERSION"('CATALOG');

      l_step := l_step + 1;
      l_step_comment := 'APEX Version';
      db_version := "APX_GET_VERSION"('APEX');

      -- in here we use hard-wired logging, since apxerr might not be in place yet
      exception when others then
        l_str := 'ERROR: ['|| l_pkg||']:['||l_stepname|| ']:[';
        l_str := l_str ||l_step||']: Setting '||l_step_comment||' has '||c_fld||' ***';
        dbms_output.put_line (l_str);
        dbms_output.put_line (sqlerrm);
      raise;
      end;

    else
      -- say something about usage of this package, or
      null;
    end if;

------------------------------------------------------------------
-- End of Initialization Section
------------------------------------------------------------------

END "APX";
/

----------------------------------------------------------------------------------------------------
-- Display Errors if any
------------------------------------------------------------------
prompt
prompt Package "APX" Errors:
select line, text from all_errors
where name = 'APX'
order by line;
prompt Done compiling Package "APX" :-)
prompt
----------------------------------------------------------------------------------------------------
set define on

---- if you want make it public
-- grant execute on apx to apex_public_user;
-- create public synonym apx for apx;

--------------------------------------------------------------------------------
-- provided interfaces
prompt "APX" provided interfaces
--------------------------------------------------------------------------------
prompt
prompt "REGISTER_LOGIN"
create or replace procedure "REGISTER_LOGIN"
is
begin
  insert into "APX$USR_SESSION" (app_user_session_id, app_username, app_id, app_ws_id)
  values(v('SESSION'), v('APP_USER'), v('APP_ID'), apx.getwsid(p_app_id=>v('APP_ID')));
end;
/

set pages 0 line 120 define off verify off set feed off timing off

EXIT SQL.SQLCODE;