

-------------------------------------------------------------------------------- 
-- APEX_230200_APX_CHK_PREUPD.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

-------------------------------------------------------------------------------
--WWS-Web_PreUpgradeCheck
create or replace view "APEX232_UPDATE_GRANTS"
as
select GRANTEE, OWNER, TABLE_NAME,
       case table_name
           when 'WWV_FLOW_LIST_ITEMS' then 2
           when 'WWV_FLOW_MESSAGES$' then 1
           when 'WWV_FLOW_LISTS' then 2
           when 'WWV_FLOW_BUILDER_AUDIT_TRAIL' then 1
           when 'WWV_FLOW_AUDIT' then 1
       end as expected,
       count(privilege) over (partition by table_name) as applied,
       GRANTOR, PRIVILEGE, GRANTABLE, COLUMN_NAME, COMMON, TYPE, INHERITED
from (
with tabs
as (select owner, table_name
    from all_tables
    where table_name in (
        'WWV_FLOW_LIST_ITEMS',
        'WWV_FLOW_MESSAGES$',
        'WWV_FLOW_LISTS',
        'WWV_FLOW_BUILDER_AUDIT_TRAIL',
        'WWV_FLOW_AUDIT'
        )
    and owner = 'APEX_230200'
)
select p.GRANTEE, p.OWNER, t.TABLE_NAME, p.GRANTOR, p.PRIVILEGE, p.GRANTABLE, null as COLUMN_NAME, p.COMMON, p.TYPE, p.INHERITED
from tabs t left outer join dba_tab_privs p
on (t.table_name = p.table_name
  and p.owner = t.owner)
)
union all
select GRANTEE, OWNER, TABLE_NAME, 5 as expected, count(privilege) over (partition by table_name) as applied, GRANTOR, PRIVILEGE, GRANTABLE, COLUMN_NAME, COMMON, TYPE, INHERITED
from (
with tabs
as (select owner, table_name from all_tables
    where table_name in (
        'WWV_FLOWS'
        )
    and owner = 'APEX_230200'
)
select c.GRANTEE, c.OWNER, t.TABLE_NAME, c.GRANTOR, c.PRIVILEGE, c.GRANTABLE, c.COLUMN_NAME, c.COMMON, null as TYPE, c.INHERITED
from tabs t left outer join dba_col_privs c
on (t.table_name = c.table_name
  and c.owner = t.owner)
) order by 1 nulls first,2,3;

declare
l_err_cnt number;
begin
  for i in (select avg(diff) as missing_grants
            from (
            select sum(expected) - sum(applied) as diff
            from "APEX232_UPDATE_GRANTS"
            where expected != applied)) loop
    l_err_cnt := i.missing_grants;
  end loop;
  -- and evaluate errors, if any...
  if l_err_cnt > 0 then
    for g in (select * from "APEX232_UPDATE_GRANTS" where expected != applied) loop
      dbms_output.put_line(
        'GRANTEE: '|| rpad(g.GRANTEE, 10, ' ')||' OWNER: '|| rpad(g.OWNER, 12, ' ') ||' TABLE_NAME: '||rpad(g.TABLE_NAME, 22, ' ')||
        ' EXPECTED: '|| g.EXPECTED||' APPLIED: '||g.APPLIED);
    end loop;
    raise_application_error(-20001, 'User WWS is missing '||l_err_cnt ||' permissions. Upgrade will fail and is terminated here!');
  else
        dbms_output.put_line(chr(10)||SYSDATE||' All Grants to DUSR provided correctly. Upgrade will be performed.');
  end if;
  -- cleanup now
  execute immediate 'drop view "APEX232_UPDATE_GRANTS"';
end;
/

exit sql.sqlcode;

-------------------------------------------------------------------------------- 
-- APEX_230200_APX_ENV.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

-- Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
define SCR_NAME=APEX_230200_APX_ENV
define SQL_SCR_NAME=&SCR_NAME..sql
define SQL_SCR=&MAIN_DIR.\&SQL_SCR_NAME.

-- User
define USR=&2.

-- Workspace
define WS_NAME=&3.

set termout off

-- Setting Run_ID, Hostname, APEX Workspace, APEX Schema, Version and Release Date
column rel_date NEW_VALUE release_date NOPRINT
column host_name NEW_VALUE apxhost NOPRINT
column version NEW_VALUE apxver NOPRINT
column schema NEW_VALUE apxschema NOPRINT
column workspace NEW_VALUE ws NOPRINT
column workspace_id NEW_VALUE ws_id NOPRINT
column runid NEW_VALUE run_id NOPRINT
column runusr NEW_VALUE run_usr NOPRINT
column rundate NEW_VALUE run_date NOPRINT
column apex_db_schema NEW_VALUE apxusr NOPRINT
set numformat 09999999999999999
alter session set nls_date_format = 'DD.MM.YYYY HH24:MI';
select d.current_scn as RUNID, sysdate as RUNDATE, '&USR.' as RUNUSR,
       upper(i.host_name) as HOST_NAME, s.schema,
       (select max(owner) as owner from all_views where view_name = 'APEX_APPLICATIONS') as apex_db_schema,
       ar.version_no as version, ar.api_compatibility as rel_date, w.workspace_id, w.workspace
from apex_workspace_schemas s, v$instance i, apex_workspaces w, v$database d, apex_release ar
where w.workspace = '&WS_NAME.'
and s.schema = w.workspace
and s.workspace_name = w.workspace;

set termout on

-- -------------------------------------------------------------------------------
-- PROMPT ========================================================================
-- PROMPT Running: &SQL_SCR_NAME.
-- PROMPT Run ID: &run_id. | Run Date: &run_date. | Run User: &run_usr.
-- PROMPT Apex Workspace: &ws. | Workspace ID: &ws_id. | Apex Host: &apxhost.
-- PROMPT Apex Schema: &apxusr. | Apex Version: &apxver. | Release Date: &release_date.
-- -------------------------------------------------------------------------------
-- exit sql.sqlcode;

-------------------------------------------------------------------------------- 
-- APEX_230200_APX_WWS-Web_UpgradeTasks.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 500
set trimspool on
set define on
set feedback off verify off echo off

--------------------------------------------------------------------------------
-- Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG

-- Setting Run_ID, Hostname, APEX Workspace, APEX Schema, Version and Release Date
column rel_date NEW_VALUE release_date NOPRINT
column host_name NEW_VALUE apxhost NOPRINT
column version NEW_VALUE apxver NOPRINT
column schema NEW_VALUE apxschema NOPRINT
column workspace NEW_VALUE ws NOPRINT
column workspace_id NEW_VALUE ws_id NOPRINT
column runid NEW_VALUE run_id NOPRINT
column runusr NEW_VALUE run_usr NOPRINT
column rundate NEW_VALUE run_date NOPRINT
column apex_db_schema NEW_VALUE apxusr NOPRINT
set numformat 09999999999999999
alter session set nls_date_format = 'DD.MM.YYYY HH24:MI';
select run_id as RUNID, run_date as RUNDATE, run_user as RUNUSR, run_host as HOST_NAME,
       apex_schema as SCHEMA, apex_version as VERSION, apex_release_date as REL_DATE,
       WORKSPACE_ID, WORKSPACE
from "APEX_WWS"."APX$UPDLOG";
-- Setting APEX Current DB Schema
select schema as apex_db_schema from dba_registry where comp_id = 'APEX';

-------------------------------------------------------------------------------
-- Running Release Upgrade Scripts for WWS-Web

PROMPT ========================================================================
PROMPT Run ID: &run_id. | Run Date: &run_date. | Run User: &run_usr. |
PROMPT Apex Workspace: &ws. | Workspace ID: &ws_id. |
PROMPT Apex Host: &apxhost. | Apex Schema: &apxschema. |
PROMPT Apex Version: &apxver. | Release Date: &release_date. |
PROMPT ========================================================================
PROMPT
PROMPT
PROMPT ========================================================================
PROMPT 1.) APEX_WWS_ApplicationItemsGenerateSQL1000.sql
-- @@&MAIN_DIR.\APEX_WWS_ApplicationItemsGenerateSQL1000.sql &MAIN_DIR.
PROMPT
PROMPT ========================================================================
PROMPT 3.) &MAIN_DIR.\APEX_WWS_ApplicationItemsGenerateSQL.sql
@@&MAIN_DIR.\APEX_WWS_ApplicationItemsGenerateSQL.sql &MAIN_DIR.
PROMPT
PROMPT ========================================================================
PROMPT 5.) &MAIN_DIR.\APEX_WWS_ApplicationProcessesGenerateSQL1000.sql
-- @@&MAIN_DIR.\APEX_WWS_ApplicationProcessesGenerateSQL1000.sql &MAIN_DIR.
PROMPT
PROMPT ========================================================================
PROMPT 7.) &MAIN_DIR.\APEX_WWS_ApplicationProcessesGenerateSQL.sql
@@&MAIN_DIR.\APEX_WWS_ApplicationProcessesGenerateSQL.sql &MAIN_DIR.
PROMPT
PROMPT ========================================================================
PROMPT 9.) &RUN_DIR.\APEX_WWS_TextMessagesForMenu1000.sql
-- @@&MAIN_DIR.\APEX_WWS_TextMessagesForMenu1000.sql &MAIN_DIR.
PROMPT
PROMPT ========================================================================
PROMPT 10.) &MAIN_DIR.\APEX_WWS_TextMessagesForMenuAll.sql
@@&MAIN_DIR.\APEX_WWS_TextMessagesForMenuAll.sql &MAIN_DIR.
PROMPT
PROMPT ========================================================================
-- PROMPT 11.) &MAIN_DIR.\APEX_WWS_UpdateDesktopNavigationBar1000.sql
-- @@&MAIN_DIR.\APEX_WWS_UpdateDesktopNavigationBar1000.sql &MAIN_DIR.
PROMPT 11.) &MAIN_DIR.\APEX_WWS_UpdateDesktopNavigationBarOthers.sql
@@&MAIN_DIR.\APEX_WWS_UpdateDesktopNavigationBarOthers.sql
PROMPT
PROMPT ========================================================================
PROMPT 12.) &MAIN_DIR.\APEX_WWS_UpdateLogoText.sql
@@&MAIN_DIR.\APEX_WWS_UpdateLogoText.sql &MAIN_DIR.
PROMPT
PROMPT ========================================================================
PROMPT Release &apxver. Upgrade Scripts for WWS-Web on &apxhost. Done.
PROMPT ========================================================================

exit;

-------------------------------------------------------------------------------- 
-- APEX_230200_GrantsToDUSR.sql

--------------------------------------------------------------------------------
-- Requirements: Grants for DUSR on APEX Objects for Upgrade Scripts (one time only)
GRANT UPDATE ("NAV_BAR_LIST_ID", "LAST_UPDATED_ON", "LAST_UPDATED_BY", "SHARED_COMPONENTS_SCN", "LOGO_TEXT") ON "APEX_230200"."WWV_FLOWS" TO "DUSR";
GRANT UPDATE, INSERT ON "APEX_230200"."WWV_FLOW_LIST_ITEMS" TO DUSR;
GRANT UPDATE, INSERT ON "APEX_230200"."WWV_FLOW_LISTS" TO DUSR;
GRANT UPDATE ON "APEX_230200"."WWV_FLOW_MESSAGES$" TO DUSR;
GRANT INSERT ON "APEX_230200"."WWV_FLOW_BUILDER_AUDIT_TRAIL" TO DUSR;
GRANT EXECUTE ON "APEX_230200"."WWV_FLOW_AUDIT" TO DUSR;


-------------------------------------------------------------------------------- 
-- APEX_230200_RevokeGrantsFromDUSR.sql

--------------------------------------------------------------------------------
-- -- Revoke After Upgrade: 
REVOKE UPDATE, INSERT ON "APEX_230200"."WWV_FLOW_LIST_ITEMS" FROM DUSR;
REVOKE UPDATE, INSERT ON "APEX_230200"."WWV_FLOW_LISTS" FROM DUSR;
REVOKE UPDATE ON "APEX_230200"."WWV_FLOW_MESSAGES$" FROM DUSR;
REVOKE UPDATE ON "APEX_230200"."WWV_FLOWS" FROM "DUSR";
REVOKE INSERT ON "APEX_230200"."WWV_FLOW_BUILDER_AUDIT_TRAIL" FROM DUSR;
REVOKE EXECUTE ON "APEX_230200"."WWV_FLOW_AUDIT" FROM DUSR;

-------------------------------------------------------------------------------- 
-- APEX_WWS-Web_PostUpgradeTasks.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as APEX_WWS!!!';
begin
  if user != 'APEX_WWS'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS-Web_PostUpgradeTasks
define SQL_SCR=&SCR_NAME..sql

-- Setting Run_ID, Hostname, APEX Workspace, APEX Schema, Version and Release Date
column rel_date NEW_VALUE release_date NOPRINT
column host_name NEW_VALUE apxhost NOPRINT
column version NEW_VALUE apxver NOPRINT
column schema NEW_VALUE apxschema NOPRINT
column workspace NEW_VALUE ws NOPRINT
column workspace_id NEW_VALUE ws_id NOPRINT
column runid NEW_VALUE run_id NOPRINT
column runusr NEW_VALUE run_usr NOPRINT
column rundate NEW_VALUE run_date NOPRINT
column apex_db_schema NEW_VALUE apxusr NOPRINT
set numformat 09999999999999999
alter session set nls_date_format = 'DD.MM.YYYY HH24:MI';
select run_id as RUNID, run_date as RUNDATE, run_user as RUNUSR, run_host as HOST_NAME,
       apex_schema as SCHEMA, apex_version as VERSION, apex_release_date as REL_DATE,
       WORKSPACE_ID, WORKSPACE, APEX_DB_SCHEMA as apex_db_schema
from "APEX_WWS"."APX$UPDLOG";

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

-------------------------------------------------------------------------------
set echo off

PROMPT ========================================================================
PROMPT 14.) Running: &SCR_NAME.
PROMPT Run ID: &run_id. | Run Date: &run_date. | Run User: &run_usr. |
PROMPT Apex Workspace: &ws. | Workspace ID: &ws_id. |
PROMPT Apex Host: &apxhost. | Apex Schema: &apxschema. |
PROMPT Apex Version: &apxver. | Release Date: &release_date. |

-- create Output File
spool &LOG_DIR.\&SCR_NAME..log

-- log run to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

set echo off

-------------------------------------------------------------------------------
-- Dropping Logging Views and Tables
-------------------------------------------------------------------------------

PROMPT ========================================================================
PROMPT Dropping Logging Views and Tables
PROMPT ========================================================================
PROMPT Dropping Tables "APX$APP_ITEMS[_BEFORE|_AFTER]"
PROMPT Dropping Tables "APX$APP_PROCESSES[_BEFORE|_AFTER]"
PROMPT Dropping Tables "APX$APP_TEXT_MESSAGES[_BEFORE|_AFTER]"
PROMPT Dropping Tables "APX$APP_LIST_ENTRIES[_BEFORE|_AFTER]"
PROMPT Dropping Tables "APX$APP_LOGO_TEXT[_BEFORE|_AFTER]"
PROMPT Dropping View "APX$APP_ITEMS_V"
PROMPT Dropping View "APX$APP_PROCESSES_V"
PROMPT Dropping View "APX$APP_TEXT_MESSAGES_V"
PROMPT Dropping View "APX$APP_LIST_ENTRIES_V"
PROMPT Dropping View "APX$APP_LOGO_TEXT_V"
PROMPT Dropping View "APX$APP_ITEMS_COMPARE_V"
PROMPT Dropping View "APX$APP_LIST_ENTRIES_COMPARE_V"
PROMPT Dropping View "APX$APP_PROCESSES_COMPARE_V"
PROMPT Dropping View "APX$APP_TEXT_MESSAGES_COMPARE_V"
PROMPT Dropping View "APX$APP_LOGO_TEXT_COMPARE_V"
PROMPT ========================================================================

-----------------------------------------------------------------------------
-- dropping logging views and tables
declare
  table_or_view_not_exists EXCEPTION;
  PRAGMA EXCEPTION_INIT(table_or_view_not_exists, -00942);
  l_errm varchar2(2000);
begin
  begin
      for t in (select table_name from all_tables where table_name in
                  ('APX$APP_ITEMS_BEFORE', 'APX$APP_ITEMS_AFTER',
                   'APX$APP_PROCESSES_BEFORE', 'APX$APP_PROCESSES_AFTER',
                   'APX$APP_TEXT_MESSAGES_BEFORE', 'APX$APP_TEXT_MESSAGES_AFTER',
                   'APX$APP_LIST_ENTRIES_BEFORE', 'APX$APP_LIST_ENTRIES_AFTER',
                   'APX$APP_LOGO_TEXT_BEFORE', 'APX$APP_LOGO_TEXT_AFTER')) loop
        execute immediate 'drop table '||t.table_name||' purge';
      end loop;
  exception when table_or_view_not_exists then null;
  when others then
    l_errm := substr(SQLERRM, 1, 2000);
    -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = "DESCRIPTION"||' Task DROP TABLES failed with: '||l_errm;
    commit;
  raise;
  end;
  begin
    for v in (select view_name from all_views where view_name in
                ('APX$APP_ITEMS_V', 'APX$APP_PROCESSES_V',
                 'APX$APP_TEXT_MESSAGES_V', 'APX$APP_LIST_ENTRIES_V', 'APX$APP_LOGO_TEXT_V',
                 'APX$APP_ITEMS_COMPARE_V', 'APX$APP_LIST_ENTRIES_COMPARE_V', 'APX$APP_LOGO_TEXT_COMPARE_V',
                 'APX$APP_PROCESSES_COMPARE_V', 'APX$APP_TEXT_MESSAGES_COMPARE_V')) loop
      execute immediate 'drop view '||v.view_name;
    end loop;
  exception when table_or_view_not_exists then null;
  when others then
    l_errm := substr(SQLERRM, 1, 2000);
    -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = "DESCRIPTION"||' Task DROP VIEWS failed with: '||l_errm;
    commit;
  raise;
  end;
end;
/

PROMPT Main and Compare Tables will NOT be deleted for later reference
PROMPT ========================================================================
PROMPT Updating Run Log
update "APEX_WWS"."APX$UPDLOG"
set "END_TS" = systimestamp,
    "RUN_STATUS" = 'COMPLETED',
    "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX 23.2 finished.';
commit;
PROMPT Done...
PROMPT ========================================================================
PROMPT
exit sql.sqlcode;


-------------------------------------------------------------------------------- 
-- APEX_WWS-Web_PreUpgradeTasks.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

--------------------------------------------------------------------------------
-- !!! runas APEX_WWS !!!
declare l_msg varchar2(1000) := 'This script must be run as &3.!!!';
begin
  if user != '&3.'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Environment first
@@&1.\APEX_230200_APX_ENV.sql &1. &2. &3.

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS-Web_PreUpgradeTasks
define SQL_SCR=&SCR_NAME..sql

PROMPT ========================================================================
PROMPT 0.) Running: &SQL_SCR.
PROMPT Run ID: &run_id. | Run Date: &run_date. | Run User: &run_usr. |
PROMPT Apex Workspace: &ws. | Workspace ID: &ws_id. |
PROMPT Apex Host: &apxhost. | Apex Schema: &apxusr. |
PROMPT Apex Version: &apxver. | Release Date: &release_date. |

-------------------------------------------------------------------------------
-- create Output File
spool &LOG_DIR.\&SCR_NAME..log

PROMPT ========================================================================
PROMPT Creating Logging Views and Tables
PROMPT ========================================================================
PROMPT Main Logging Table "APX$UPDLOG"
begin
  for t in (select table_name from all_tables
             where table_name = 'APX$UPDLOG'
               and owner = 'APEX_WWS') loop
    execute immediate 'drop table '||t.table_name||' purge';
  end loop;
end;
/

-------------------------------------------------------------------------------
-- Main Log Table
create table "APEX_WWS"."APX$UPDLOG" (
  "RUN_ID" NUMBER,
  "RUN_DATE" DATE,
  "RUN_USER" VARCHAR2(128 CHAR),
  "RUN_HOST" VARCHAR2(100 CHAR),
  "START_TS" TIMESTAMP (6) WITH TIME ZONE,
  "END_TS" TIMESTAMP (6) WITH TIME ZONE,
  "RUN_STATUS" VARCHAR2(20 CHAR),
  "WORKSPACE_ID" NUMBER,
  "WORKSPACE" VARCHAR2(1000 CHAR),
  "APEX_VERSION" VARCHAR2(10 CHAR),
  "APEX_SCHEMA" VARCHAR2(20 CHAR),
  "APEX_DB_SCHEMA" VARCHAR2(20 CHAR),
  "APEX_RELEASE_DATE" VARCHAR2(12 CHAR),
  "DESCRIPTION" VARCHAR2(4000 CHAR)
);

grant all on "APX$UPDLOG" to "DUSR";

-- log run
insert into "APEX_WWS"."APX$UPDLOG" (
  "RUN_ID", "RUN_DATE", "RUN_USER", "RUN_HOST", "START_TS", "END_TS", "RUN_STATUS",
  "WORKSPACE_ID", "WORKSPACE", "APEX_VERSION", "APEX_SCHEMA", "APEX_DB_SCHEMA", "APEX_RELEASE_DATE", "DESCRIPTION"
  ) values (&run_id., '&run_date.', '&run_usr.', '&apxhost.', systimestamp, null, 'INITIALIZE', &ws_id.,
           '&ws.', '&apxver.', '&apxschema.',  '&apxusr.',
           '&release_date.', 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.');

commit;

-------------------------------------------------------------------------------
-- log and record application items
PROMPT Application Items View "APX$APP_ITEMS_V"
create or replace view "APX$APP_ITEMS_V"
as
select WORKSPACE, APPLICATION_ID, APPLICATION_NAME, WORKING_COPY_NAME, ITEM_NAME,
       SCOPE, DATA_TYPE, SESSION_STATE_PROTECTION, ESCAPE_ON_HTTP_OUTPUT, BUILD_OPTION,
       IS_SUBSCRIBED, SUBSCRIBED_FROM, SUBSCRIBED_FROM_ID, SUBSCRIPTION_NEEDS_REFRESH,
       LAST_UPDATED_BY, LAST_UPDATED_ON, COMPONENT_COMMENT, APPLICATION_ITEM_ID
from apex_application_items
where workspace = '&3.'
and (instr(APPLICATION_ITEM_ID, ',') = 0 and instr(APPLICATION_ITEM_ID, '.') = 0)
order by APPLICATION_ID, ITEM_NAME;

-- dropping logging tables
begin
  for t in (select table_name from all_tables where table_name in ('APX$APP_ITEMS_BEFORE', 'APX$APP_ITEMS_AFTER',
                                                                   'APX$APP_ITEMS_COMPARE')) loop
    execute immediate 'drop table '||t.table_name||' purge';
  end loop;
end;
/

PROMPT Application Items Tables "APX$APP_ITEMS[_BEFORE|_AFTER]"
create table "APX$APP_ITEMS_BEFORE"
as select * from "APX$APP_ITEMS_V"
where 1=0;

grant all on "APX$APP_ITEMS_BEFORE" to "DUSR";

create table "APX$APP_ITEMS_AFTER"
as select * from "APX$APP_ITEMS_V"
where 1=0;

grant all on "APX$APP_ITEMS_AFTER" to "DUSR";

--------------------------------------------------------------------------------
-- cross check application items
PROMPT Application Items Compare View "APX$APP_ITEMS_COMPARE_V"
create or replace view "APEX_WWS"."APX$APP_ITEMS_COMPARE_V"
as
with runlog
as (select RUN_ID, RUN_DATE, RUN_USER, RUN_HOST from "APX$UPDLOG")
select l.RUN_ID, l.RUN_DATE, l.RUN_HOST, l.RUN_USER,
       b.WORKSPACE as WORKSPACE_B,
       a.WORKSPACE as WORKSPACE_A,
       b.APPLICATION_ID as APPLICATION_ID_B,
       a.APPLICATION_ID as APPLICATION_ID_A,
       b.APPLICATION_NAME as APPLICATION_NAME_B,
       a.APPLICATION_NAME as APPLICATION_NAME_A,
       b.WORKING_COPY_NAME as WORKING_COPY_NAME_B,
       a.WORKING_COPY_NAME as WORKING_COPY_NAME_A,
       b.ITEM_NAME as ITEM_NAME_B,
       a.ITEM_NAME as ITEM_NAME_A,
       b.SCOPE as SCOPE_B,
       a.SCOPE as SCOPE_A,
       b.DATA_TYPE as DATA_TYPE_B,
       a.DATA_TYPE as DATA_TYPE_A,
       b.SESSION_STATE_PROTECTION as SESSION_STATE_PROTECTION_B,
       a.SESSION_STATE_PROTECTION as SESSION_STATE_PROTECTION_A,
       b.ESCAPE_ON_HTTP_OUTPUT as ESCAPE_ON_HTTP_OUTPUT_B,
       a.ESCAPE_ON_HTTP_OUTPUT as ESCAPE_ON_HTTP_OUTPUT_A,
       b.BUILD_OPTION as BUILD_OPTION_B,
       a.BUILD_OPTION as BUILD_OPTION_A,
       b.IS_SUBSCRIBED as IS_SUBSCRIBED_B,
       a.IS_SUBSCRIBED as IS_SUBSCRIBED_A,
       b.SUBSCRIBED_FROM as SUBSCRIBED_FROM_B,
       a.SUBSCRIBED_FROM as SUBSCRIBED_FROM_A,
       b.SUBSCRIBED_FROM_ID as SUBSCRIBED_FROM_ID_B,
       a.SUBSCRIBED_FROM_ID as SUBSCRIBED_FROM_ID_A,
       b.SUBSCRIPTION_NEEDS_REFRESH as SUBSCRIPTION_NEEDS_REFRESH_B,
       a.SUBSCRIPTION_NEEDS_REFRESH as SUBSCRIPTION_NEEDS_REFRESH_A,
       b.LAST_UPDATED_BY as LAST_UPDATED_BY_B,
       a.LAST_UPDATED_BY as LAST_UPDATED_BY_A,
       b.LAST_UPDATED_ON as LAST_UPDATED_ON_B,
       a.LAST_UPDATED_ON as LAST_UPDATED_ON_A,
       b.COMPONENT_COMMENT as COMPONENT_COMMENT_B,
       a.COMPONENT_COMMENT as COMPONENT_COMMENT_A,
       b.APPLICATION_ITEM_ID as APPLICATION_ITEM_ID_B,
       a.APPLICATION_ITEM_ID as APPLICATION_ITEM_ID_A
from APX$APP_ITEMS_BEFORE b full outer join APX$APP_ITEMS_AFTER a
on (    b.APPLICATION_ID = a.APPLICATION_ID
    and b.ITEM_NAME = a.ITEM_NAME)
    cross join RUNLOG l
order by b.APPLICATION_ID, b.APPLICATION_ITEM_ID;

grant all on "APX$APP_ITEMS_COMPARE_V" to "DUSR";

-- create logging tables
create table "APX$APP_ITEMS_COMPARE"
as select * from "APX$APP_ITEMS_COMPARE_V"
where 1=0;

grant all on "APX$APP_ITEMS_COMPARE" to "DUSR";

-------------------------------------------------------------------------------
-- log and record application processes
PROMPT Application Processes View "APX$APP_PROCESSES_V"
create or replace view "APX$APP_PROCESSES_V"
as
select WORKSPACE, APPLICATION_ID, APPLICATION_NAME, WORKING_COPY_NAME, PROCESS_SEQUENCE,
       PROCESS_TYPE_CODE, PROCESS_NAME, BUILD_OPTION, IS_SUBSCRIBED, SUBSCRIBED_FROM,
       SUBSCRIBED_FROM_ID, SUBSCRIPTION_NEEDS_REFRESH,
       LAST_UPDATED_BY, LAST_UPDATED_ON, COMPONENT_COMMENT, APPLICATION_PROCESS_ID
from apex_application_processes
where workspace = 'APEX_WWS'
and (instr(APPLICATION_PROCESS_ID, ',') = 0 and instr(APPLICATION_PROCESS_ID, '.') = 0)
order by APPLICATION_ID, PROCESS_NAME;

-- dropping logging tables
begin
  for t in (select table_name from all_tables where table_name in
              ('APX$APP_PROCESSES_BEFORE', 'APX$APP_PROCESSES_AFTER', 'APX$APP_PROCESSES_COMPARE')
            ) loop
    execute immediate 'drop table '||t.table_name||' purge';
  end loop;
end;
/

PROMPT Application Processes Tables "APX$APP_PROCESSES[_BEFORE|_AFTER]"
create table "APX$APP_PROCESSES_BEFORE"
as select * from "APX$APP_PROCESSES_V"
where 1=0;

grant all on "APX$APP_PROCESSES_BEFORE" to "DUSR";

create table "APX$APP_PROCESSES_AFTER"
as select * from "APX$APP_PROCESSES_V"
where 1=0;

grant all on "APX$APP_PROCESSES_AFTER" to "DUSR";

--------------------------------------------------------------------------------
-- cross check application processes
PROMPT Application Processes Compare View "APX$APP_PROCESSES_COMPARE_V"
create or replace view "APEX_WWS"."APX$APP_PROCESSES_COMPARE_V"
as
with runlog
as (select RUN_ID, RUN_DATE, RUN_USER, RUN_HOST from "APX$UPDLOG")
select l.RUN_ID, l.RUN_DATE, l.RUN_HOST, l.RUN_USER,
       b.WORKSPACE as WORKSPACE_B,
       a.WORKSPACE as WORKSPACE_A,
       b.APPLICATION_ID as APPLICATION_ID_B,
       a.APPLICATION_ID as APPLICATION_ID_A,
       b.APPLICATION_NAME as APPLICATION_NAME_B,
       a.APPLICATION_NAME as APPLICATION_NAME_A,
       b.WORKING_COPY_NAME as WORKING_COPY_NAME_B,
       a.WORKING_COPY_NAME as WORKING_COPY_NAME_A,
       b.PROCESS_SEQUENCE as PROCESS_SEQUENCE_B,
       a.PROCESS_SEQUENCE as PROCESS_SEQUENCE_A,
       b.PROCESS_TYPE_CODE as PROCESS_TYPE_CODE_B,
       a.PROCESS_TYPE_CODE as PROCESS_TYPE_CODE_A,
       b.PROCESS_NAME as PROCESS_NAME_B,
       a.PROCESS_NAME as PROCESS_NAME_A,
       b.BUILD_OPTION as BUILD_OPTION_B,
       a.BUILD_OPTION as BUILD_OPTION_A,
       b.IS_SUBSCRIBED as IS_SUBSCRIBED_B,
       a.IS_SUBSCRIBED as IS_SUBSCRIBED_A,
       b.SUBSCRIBED_FROM as SUBSCRIBED_FROM_B,
       a.SUBSCRIBED_FROM as SUBSCRIBED_FROM_A,
       b.SUBSCRIBED_FROM_ID as SUBSCRIBED_FROM_ID_B,
       a.SUBSCRIBED_FROM_ID as SUBSCRIBED_FROM_ID_A,
       b.SUBSCRIPTION_NEEDS_REFRESH as SUBSCRIPTION_NEEDS_REFRESH_B,
       a.SUBSCRIPTION_NEEDS_REFRESH as SUBSCRIPTION_NEEDS_REFRESH_A,
       b.LAST_UPDATED_BY as LAST_UPDATED_BY_B,
       a.LAST_UPDATED_BY as LAST_UPDATED_BY_A,
       b.LAST_UPDATED_ON as LAST_UPDATED_ON_B,
       a.LAST_UPDATED_ON as LAST_UPDATED_ON_A,
       b.COMPONENT_COMMENT as COMPONENT_COMMENT_B,
       a.COMPONENT_COMMENT as COMPONENT_COMMENT_A,
       b.APPLICATION_PROCESS_ID as APPLICATION_PROCESS_ID_B,
       a.APPLICATION_PROCESS_ID as APPLICATION_PROCESS_ID_A
from APX$APP_PROCESSES_BEFORE b full outer join APX$APP_PROCESSES_AFTER a
on (    b.APPLICATION_ID = a.APPLICATION_ID
    and b.PROCESS_NAME = a.PROCESS_NAME)
    cross join RUNLOG l
order by b.APPLICATION_ID, b.APPLICATION_PROCESS_ID;

grant all on "APX$APP_PROCESSES_COMPARE_V" to "DUSR";

-- create logging tables
create table "APX$APP_PROCESSES_COMPARE"
as select * from "APX$APP_PROCESSES_COMPARE_V"
where 1=0;

grant all on "APX$APP_PROCESSES_COMPARE" to "DUSR";

-------------------------------------------------------------------------------
-- log and record application text messages
PROMPT Application Text Messages View "APX$APP_TEXT_MESSAGES_V"
create or replace view "APX$APP_TEXT_MESSAGES_V"
as
select WORKSPACE, APPLICATION_ID, APPLICATION_NAME, WORKING_COPY_NAME, TRANSLATABLE_MESSAGE,
       MESSAGE_TEXT, LANGUAGE_CODE, IS_JS_MESSAGE, IS_SUBSCRIBED, SUBSCRIBED_FROM,
       SUBSCRIBED_FROM_ID, SUBSCRIPTION_NEEDS_REFRESH, LAST_UPDATED_BY, LAST_UPDATED_ON, TRANSLATION_ENTRY_ID
from apex_application_translations
where workspace = 'APEX_WWS'
and (instr(TRANSLATION_ENTRY_ID, ',') = 0 and instr(TRANSLATION_ENTRY_ID, '.') = 0)
order by APPLICATION_ID, TRANSLATABLE_MESSAGE, LANGUAGE_CODE;

-- dropping logging tables
begin
  for t in (select table_name from all_tables where table_name in
              ('APX$APP_TEXT_MESSAGES_BEFORE', 'APX$APP_TEXT_MESSAGES_AFTER', 'APX$APP_TEXT_MESSAGES_COMPARE')
            ) loop
    execute immediate 'drop table '||t.table_name||' purge';
  end loop;
end;
/

-- create logging tables
PROMPT Application Text Messages Tables"APX$APP_TEXT_MESSAGES[_BEFORE|_AFTER]"
create table "APX$APP_TEXT_MESSAGES_BEFORE"
as select * from "APX$APP_TEXT_MESSAGES_V"
where 1=0;

grant all on "APX$APP_TEXT_MESSAGES_BEFORE" to "DUSR";

create table "APX$APP_TEXT_MESSAGES_AFTER"
as select * from "APX$APP_TEXT_MESSAGES_V"
where 1=0;

grant all on "APX$APP_TEXT_MESSAGES_AFTER" to "DUSR";

--------------------------------------------------------------------------------
-- cross check application text messages
PROMPT Application Text Messages Compare View "APX$APP_TEXT_MESSAGES_COMPARE_V"
create or replace view "APEX_WWS"."APX$APP_TEXT_MESSAGES_COMPARE_V"
as
with runlog
as (select RUN_ID, RUN_DATE, RUN_USER, RUN_HOST from "APX$UPDLOG")
select l.RUN_ID, l.RUN_DATE, l.RUN_HOST, l.RUN_USER,
       b.WORKSPACE as WORKSPACE_B,
       a.WORKSPACE as WORKSPACE_A,
       b.APPLICATION_ID as APPLICATION_ID_B,
       a.APPLICATION_ID as APPLICATION_ID_A,
       b.APPLICATION_NAME as APPLICATION_NAME_B,
       a.APPLICATION_NAME as APPLICATION_NAME_A,
       b.WORKING_COPY_NAME as WORKING_COPY_NAME_B,
       a.WORKING_COPY_NAME as WORKING_COPY_NAME_A,
       b.TRANSLATABLE_MESSAGE as TRANSLATABLE_MESSAGE_B,
       a.TRANSLATABLE_MESSAGE as TRANSLATABLE_MESSAGE_A,
       b.MESSAGE_TEXT as MESSAGE_TEXT_B,
       a.MESSAGE_TEXT as MESSAGE_TEXT_A,
       b.LANGUAGE_CODE as LANGUAGE_CODE_B,
       a.LANGUAGE_CODE as LANGUAGE_CODE_A,
       b.IS_JS_MESSAGE as IS_JS_MESSAGE_B,
       a.IS_JS_MESSAGE as IS_JS_MESSAGE_A,
       b.IS_SUBSCRIBED as IS_SUBSCRIBED_B,
       a.IS_SUBSCRIBED as IS_SUBSCRIBED_A,
       b.SUBSCRIBED_FROM as SUBSCRIBED_FROM_B,
       a.SUBSCRIBED_FROM as SUBSCRIBED_FROM_A,
       b.SUBSCRIBED_FROM_ID as SUBSCRIBED_FROM_ID_B,
       a.SUBSCRIBED_FROM_ID as SUBSCRIBED_FROM_ID_A,
       b.SUBSCRIPTION_NEEDS_REFRESH as SUBSCRIPTION_NEEDS_REFRESH_B,
       a.SUBSCRIPTION_NEEDS_REFRESH as SUBSCRIPTION_NEEDS_REFRESH_A,
       b.LAST_UPDATED_BY as LAST_UPDATED_BY_B,
       a.LAST_UPDATED_BY as LAST_UPDATED_BY_A,
       b.LAST_UPDATED_ON as LAST_UPDATED_ON_B,
       a.LAST_UPDATED_ON as LAST_UPDATED_ON_A,
       b.TRANSLATION_ENTRY_ID as TRANSLATION_ENTRY_ID_B,
       a.TRANSLATION_ENTRY_ID as TRANSLATION_ENTRY_ID_A
from APX$APP_TEXT_MESSAGES_BEFORE b full outer join APX$APP_TEXT_MESSAGES_AFTER a
on (    b.APPLICATION_ID = a.APPLICATION_ID
    and b.MESSAGE_TEXT = a.MESSAGE_TEXT
    and b.LANGUAGE_CODE = a.LANGUAGE_CODE)
    cross join RUNLOG l
order by b.APPLICATION_ID, b.MESSAGE_TEXT;

grant all on "APX$APP_TEXT_MESSAGES_COMPARE_V" to "DUSR";

-- create logging tables
create table "APX$APP_TEXT_MESSAGES_COMPARE"
as select * from "APX$APP_TEXT_MESSAGES_COMPARE_V"
where 1=0;

grant all on "APX$APP_TEXT_MESSAGES_COMPARE" to "DUSR";

-------------------------------------------------------------------------------
-- log and record desktop navigation bar entries
PROMPT Application List Entries View "APX$APP_LIST_ENTRIES_V"
create or replace view "APX$APP_LIST_ENTRIES_V"
as
with
lst
as (
    select a.LIST_ID as ID, a.APPLICATION_ID, a.LIST_NAME,
           (select w.workspace_id from apex_workspaces w where w.workspace = a.workspace) as WORKSPACE
    from apex_application_lists a
    where a.APPLICATION_ID = 1000
    and a.LIST_NAME = 'Desktop Navigation Bar'
)
SELECT al.WORKSPACE, al.APPLICATION_ID, al.APPLICATION_NAME, al.LIST_NAME,
       al.DISPLAY_SEQUENCE, al.ENTRY_TEXT, al.BUILD_OPTION,
       al.LAST_UPDATED_BY, al.LAST_UPDATED_ON, al.LIST_ID, al.LIST_ENTRY_ID
FROM apex_application_list_entries al, lst
WHERE al.LIST_ID = lst.id
ORDER BY al.APPLICATION_ID, al.DISPLAY_SEQUENCE, al.ENTRY_TEXT;

-- dropping logging tables
begin
  for t in (select table_name from all_tables where table_name in
              ('APX$APP_LIST_ENTRIES_BEFORE', 'APX$APP_LIST_ENTRIES_AFTER', 'APX$APP_LIST_ENTRIES_COMPARE')
            ) loop
    execute immediate 'drop table '||t.table_name||' purge';
  end loop;
end;
/

PROMPT Application List Items Tables "APX$APP_LIST_ENTRIES[_BEFORE|_AFTER]"
create table "APX$APP_LIST_ENTRIES_BEFORE"
as select * from "APX$APP_LIST_ENTRIES_V"
where 1=0;

grant all on "APX$APP_LIST_ENTRIES_BEFORE" to "DUSR";

create table "APX$APP_LIST_ENTRIES_AFTER"
as select * from "APX$APP_LIST_ENTRIES_V"
where 1=0;

grant all on "APX$APP_LIST_ENTRIES_AFTER" to "DUSR";

--------------------------------------------------------------------------------
-- cross check application text messages
PROMPT Application List Items (Nav Bar) Compare View "APX$APP_LIST_ENTRIES_COMPARE_V"
create or replace view "APEX_WWS"."APX$APP_LIST_ENTRIES_COMPARE_V"
as
with runlog
as (select RUN_ID, RUN_DATE, RUN_USER, RUN_HOST from "APX$UPDLOG")
select l.RUN_ID, l.RUN_DATE, l.RUN_HOST, l.RUN_USER,
       b.WORKSPACE as WORKSPACE_B,
       a.WORKSPACE as WORKSPACE_A,
       b.APPLICATION_ID as APPLICATION_ID_B,
       a.APPLICATION_ID as APPLICATION_ID_A,
       b.APPLICATION_NAME as APPLICATION_NAME_B,
       a.APPLICATION_NAME as APPLICATION_NAME_A,
       b.LIST_NAME as LIST_NAME_B,
       a.LIST_NAME as LIST_NAME_A,
       b.DISPLAY_SEQUENCE as DISPLAY_SEQUENCE_B,
       a.DISPLAY_SEQUENCE as DISPLAY_SEQUENCE_A,
       b.ENTRY_TEXT as ENTRY_TEXT_B,
       a.ENTRY_TEXT as ENTRY_TEXT_A,
       b.BUILD_OPTION as BUILD_OPTION_B,
       a.BUILD_OPTION as BUILD_OPTION_A,
       b.LAST_UPDATED_BY as LAST_UPDATED_BY_B,
       a.LAST_UPDATED_BY as LAST_UPDATED_BY_A,
       b.LAST_UPDATED_ON as LAST_UPDATED_ON_B,
       a.LAST_UPDATED_ON as LAST_UPDATED_ON_A,
       b.LIST_ID as LIST_ID_B,
       a.LIST_ID as LIST_ID_A,
       b.LIST_ENTRY_ID as LIST_ENTRY_ID_B,
       a.LIST_ENTRY_ID as LIST_ENTRY_ID_A
from APX$APP_LIST_ENTRIES_BEFORE b full outer join APX$APP_LIST_ENTRIES_AFTER a
on (    b.APPLICATION_ID = a.APPLICATION_ID
    and b.LIST_NAME = a.LIST_NAME
    and b.DISPLAY_SEQUENCE = a.DISPLAY_SEQUENCE
    and b.ENTRY_TEXT = a.ENTRY_TEXT)
    cross join RUNLOG l
order by b.APPLICATION_ID, b.LIST_ENTRY_ID;

grant all on "APX$APP_LIST_ENTRIES_COMPARE_V" to "DUSR";

-- create logging tables
create table "APX$APP_LIST_ENTRIES_COMPARE"
as select * from "APX$APP_LIST_ENTRIES_COMPARE_V"
where 1=0;

grant all on "APX$APP_LIST_ENTRIES_COMPARE" to "DUSR";


-------------------------------------------------------------------------------
-- log and record logo text entries in top bar
PROMPT Application List Entries View "APX$APP_LOGO_TEXT_V"
create or replace view "APX$APP_LOGO_TEXT_V"
as
select WORKSPACE, APPLICATION_ID, APPLICATION_NAME, APPLICATION_PRIMARY_LANGUAGE, LOGO_TEXT
from apex_applications
where WORKSPACE = 'APEX_WWS'
order by APPLICATION_ID;

-- dropping logging tables
begin
  for t in (select table_name from all_tables where table_name in
              ('APX$APP_LOGO_TEXT_BEFORE', 'APX$APP_LOGO_TEXT_AFTER', 'APX$APP_LOGO_TEXT_COMPARE')
            ) loop
    execute immediate 'drop table '||t.table_name||' purge';
  end loop;
end;
/

PROMPT Application List Items Tables "APX$APP_LOGO_TEXT[_BEFORE|_AFTER]"
create table "APX$APP_LOGO_TEXT_BEFORE"
as select * from "APX$APP_LOGO_TEXT_V"
where 1=0;

grant all on "APX$APP_LOGO_TEXT_BEFORE" to "DUSR";

create table "APX$APP_LOGO_TEXT_AFTER"
as select * from "APX$APP_LOGO_TEXT_V"
where 1=0;

grant all on "APX$APP_LOGO_TEXT_AFTER" to "DUSR";

--------------------------------------------------------------------------------
-- cross check application text messages
PROMPT Application Logo Texts Compare View "APX$APP_LOGO_TEXT_COMPARE_V"
create or replace view "APEX_WWS"."APX$APP_LOGO_TEXT_COMPARE_V"
as
with runlog
as (select RUN_ID, RUN_DATE, RUN_USER, RUN_HOST from "APX$UPDLOG")
select l.RUN_ID, l.RUN_DATE, l.RUN_HOST, l.RUN_USER,
       b.WORKSPACE as WORKSPACE_B,
       a.WORKSPACE as WORKSPACE_A,
       b.APPLICATION_ID as APPLICATION_ID_B,
       a.APPLICATION_ID as APPLICATION_ID_A,
       b.APPLICATION_NAME as APPLICATION_NAME_B,
       a.APPLICATION_NAME as APPLICATION_NAME_A,
       b.APPLICATION_PRIMARY_LANGUAGE as APPLICATION_PRIMARY_LANGUAGE_B,
       a.APPLICATION_PRIMARY_LANGUAGE as APPLICATION_PRIMARY_LANGUAGE_A,
       b.LOGO_TEXT as LOGO_TEXT_B,
       a.LOGO_TEXT as LOGO_TEXT_A
from APX$APP_LOGO_TEXT_BEFORE b full outer join APX$APP_LOGO_TEXT_AFTER a
on (    b.APPLICATION_ID = a.APPLICATION_ID
    and b.LOGO_TEXT = a.LOGO_TEXT)
    cross join RUNLOG l
order by b.APPLICATION_ID, b.LOGO_TEXT;

grant all on "APX$APP_LOGO_TEXT_COMPARE_V" to "DUSR";

-- create logging tables
create table "APX$APP_LOGO_TEXT_COMPARE"
as select * from "APX$APP_LOGO_TEXT_COMPARE_V"
where 1=0;

grant all on "APX$APP_LOGO_TEXT_COMPARE" to "DUSR";


PROMPT ========================================================================
PROMPT Adding DUSR as workspace schema
@@&MAIN_DIR.\APEX_WWS_AddWorkspaceSchemaDUSR.sql &MAIN_DIR.

-------------------------------------------------------------------------------
-- Done

PROMPT ========================================================================
exit sql.sqlcode;

-------------------------------------------------------------------------------- 
-- APEX_WWS_AddWorkspaceSchemaDUSR.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 500
set trimspool on
set define on
set feedback off verify off echo off

--------------------------------------------------------------------------------
-- !!! runas APEX_WWS !!!
declare l_msg varchar2(1000) := 'This script must be run as APEX_WWS!!!';
begin
  if user != 'APEX_WWS'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
    --exit;
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_AddWorkspaceSchemaDUSR
define SQL_SCR=&SCR_NAME..sql

-- create Output File
spool &LOG_DIR.\&SCR_NAME..log

-- log run to table
update "APEX_WWS"."APX$UPDLOG"
set "RUN_STATUS" = 'RUNNING',
    "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

-------------------------------------------------------------------------------
-- Adding User DUSR to Workspace
declare
l_errm varchar2(100);
begin
    apex_instance_admin.add_schema('APEX_WWS', 'DUSR');
    dbms_output.put_line(SYSDATE||' Adding User DUSR as Workspace Schmema to APEX_WWS.');
exception when dup_val_on_index then
    dbms_output.put_line(SYSDATE||' User DUSR already added as Workspace Schmema.');
    when others then rollback;
    l_errm := SQLERRM;
        -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = "DESCRIPTION"||'WWS-Web Upgrade Tasks failed with: '||l_errm;
    commit;
    raise;
end;
/

spool off
-- exit sql.sqlcode;


-------------------------------------------------------------------------------- 
-- APEX_WWS_ApplicationItemsGenerateSQL.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

-------------------------------------------------------------------------------
-- Logging
delete from "APEX_WWS"."APX$APP_ITEMS_BEFORE" where application_id <> 1000;
insert into "APEX_WWS"."APX$APP_ITEMS_BEFORE"
(select * from "APEX_WWS"."APX$APP_ITEMS_V" where application_id <> 1000);
commit;

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as DUSR!!!';
begin
  if user != 'DUSR'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_ApplicationItemsAll
define SQL_SCR=&SCR_NAME..sql
-------------------------------------------------------------------------------
PROMPT Running: &SCR_NAME.
PROMPT Apex Workspace: &ws. Workspace ID: &ws_id. Apex Host: &apxhost.
PROMPT Apex Schema: &apxusr. Apex Version: &apxver. Release Date: &release_date.
PROMPT
PROMPT ========================================================================

set termout off echo off

-- create Output File
spool &RUN_DIR.\&SQL_SCR.

-- log run to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

--------------------------------------------------------------------------------
-- Appllications <> 1000 - runas DUSR
with apps
as (
    select application_id, workspace
    from "APEX_APPLICATIONS"
    where APPLICATION_ID > 1000
    and WORKSPACE = 'APEX_WWS'
    and (instr(APPLICATION_ID, ',') = 0 and instr(APPLICATION_ID, '.') = 0)
    ),
--------------------------------------------------------------------------------
-- AppItems as Subscriber Item to 1000
master_items
as (
    select ID, NAME, SCOPE, PROTECTION_LEVEL, VERSION_SCN
    from "&CURRENT_APEX_SCHEMA."."WWV_FLOW_ITEMS"
    where FLOW_ID = 1000
    and SECURITY_GROUP_ID = &ws_id.
    )
--------------------------------------------------------------------------------
-- Main
select '-------------------------------------------------------------------------------------' from dual union all
select '-- Recreate all application Items for all applications other than 1000.' from dual union all
select '-- Script date: '||to_char(sysdate, 'DD.MM.YYYY HH24:MI:SS')||' - created on: &apxhost. - created by: '||user from dual union all
select '-- Add '||user||' as a parsing schema to Workspace APEX_WWS and run this script as '||user from dual union all
select '-------------------------------------------------------------------------------------' from dual union all
select 'whenever sqlerror exit sql.sqlcode rollback' from dual union all
select ' ' from dual union all
select 'set define on' from dual union all
select '' from dual union all
select 'define WORKSPACE_ID=&ws_id.' from dual union all
select '' from dual union all
select '---- 23.1.5 (ENTW)' from dual union all
select '--define APEX_SCHEMA=APEX_230100;' from dual union all
select '--define APEX_VERSION_DATE=''2023.04.28'';' from dual union all
select '--define APEX_RELEASE=''23.1.5'';' from dual union all
select '' from dual union all
select '---- &apxver. (&apxhost.)' from dual union all
select 'define APEX_SCHEMA=''&apxusr.'';' from dual union all
select 'define APEX_VERSION_DATE=''&release_date.'';' from dual union all
select 'define APEX_RELEASE=''&apxver.'';' from dual union all
select ' ' from dual union all
select 'set echo off feedback off verify off' from dual union all
select ' ' from dual union all
select 'define LOG_DIR='||chr(38)||'1.;' from dual union all
select 'spool '||chr(38)||'LOG_DIR.\'||chr(38)||'SCR_NAME..log' from dual union all
select ' ' from dual union all
select '-- log run to table' from dual union all
select 'update "APEX_WWS"."APX$UPDLOG" set "DESCRIPTION" = ''WWS-Web Upgrade Tasks for APEX '||chr(38)||'apxver.: Running: '||chr(38)||'SQL_SCR.'';' from dual union all
select 'commit;' from dual union all
select ' ' from dual union all
select 'set echo off' from dual union all
select ' ' from dual union all
select 'declare' from dual union all
select 'l_errm varchar2(2000);' from dual union all
select 'begin' from dual union all
select ' ' from dual union all
select '  -------------------------------------------------------------------------------------' from dual union all
select '  -- Set Security Group ID' from dual union all
select '  for c1 in (select workspace_id' from dual union all
select '             from apex_workspaces' from dual union all
select '             where workspace = ''APEX_WWS'') loop' from dual union all
select '    apex_util.set_security_group_id( c1.workspace_id );' from dual union all
select '    exit;' from dual union all
select '  end loop;' from dual union all
--------------------------------------------------------------------------------
-- SubQueries
select sql_str
from (
    select sort_id, application_id, sql_str from (
    select 0 as sort_id, APPLICATION_ID, chr(10)||'  -------------------------------------------------------------------------------------'||chr(10)||
                                                  '  -- Applikation: '|| APPLICATION_ID||' Workspace: '|| WORKSPACE || chr(10)  as sql_str from apps union all
    select 1 as sort_id, APPLICATION_ID, '  begin' from apps union all
    select 2 as sort_id, APPLICATION_ID, '    wwv_flow_imp.import_begin (' from apps union all
    select 3 as sort_id, APPLICATION_ID, '    p_version_yyyy_mm_dd=>'''||chr(38)||'APEX_VERSION_DATE.''' from apps union all
    select 4 as sort_id, APPLICATION_ID, '   ,p_release=>'''||chr(38)||'APEX_RELEASE.''' from apps union all
    select 5 as sort_id, APPLICATION_ID, '   ,p_default_workspace_id=>&ws_id.' from apps union all
    select 6 as sort_id, APPLICATION_ID, '   ,p_default_application_id=>'||APPLICATION_ID from apps union all
    select 7 as sort_id, APPLICATION_ID, '   ,p_default_id_offset=>1408275657627430 + '|| APPLICATION_ID from apps union all
    select 8 as sort_id, APPLICATION_ID, '   ,p_default_owner=>''APEX_WWS''' from apps union all
    select 9 as sort_id, APPLICATION_ID, '   );' from apps union all
    select 10 as sort_id, APPLICATION_ID, '  end;' from apps union all
    select 11 as sort_id, APPLICATION_ID, ' ' from apps union all
    select 12 as sort_id, APPLICATION_ID, '  -- Applikation: '|| APPLICATION_ID||' Item: AI_AKTUAL_APP_ID' from apps union all
    select 13 as sort_id, APPLICATION_ID, ' ' from apps union all
    select 14 as sort_id, APPLICATION_ID, '  -- remove item: AI_AKTUAL_APP_ID' from apps union all
    select 15 as sort_id, APPLICATION_ID, '  dbms_output.put_line(''Applikation: '|| APPLICATION_ID||' Remove Item: AI_AKTUAL_APP_ID'');' from apps union all
    select 16 as sort_id, APPLICATION_ID, '  begin' from apps union all
    select 17 as sort_id, APPLICATION_ID, '    delete from "&apxusr."."WWV_FLOW_ITEMS"' from apps union all
    select 18 as sort_id, APPLICATION_ID, '    where FLOW_ID = '|| APPLICATION_ID from apps union all
    select 19 as sort_id, APPLICATION_ID, '    and NAME = ''AI_AKTUAL_APP_ID''' from apps union all
    select 20 as sort_id, APPLICATION_ID, '    and SECURITY_GROUP_ID = &ws_id.;' from apps union all
    select 21 as sort_id, APPLICATION_ID, '  exception when others then null;' from apps union all
    select 22 as sort_id, APPLICATION_ID, '  end;' from apps union all
    select 23 as sort_id, APPLICATION_ID, ' ' from apps
    order by application_id, sort_id)
    union all
    --Application Items
    select sort_id, application_id, sql_str
    from (
    select rownum + 23 as sort_id, fi.FLOW_ID as application_id,
    ' -------------------------------------------------------------------------------' ||chr(10)||
    '  -- Applikation: '|| fi.FLOW_ID||' Item: '|| fi.NAME || chr(10)||' '||chr(10)||
    '  dbms_output.put_line(''Applikation: '|| fi.FLOW_ID||' Item: '|| fi.NAME||''');'||chr(10)||
    '  -- remove item: '||fi.NAME ||' ID: '|| fi.ID||chr(10)||
    '  begin'||chr(10)||
    '    delete from "'||chr(38)||'APEX_SCHEMA."."WWV_FLOW_ITEMS"'||chr(10)||
    '    where FLOW_ID = '|| fi.FLOW_ID|| chr(10)||
    '    and NAME = '''||fi.NAME||''''||chr(10)||
    '    and SECURITY_GROUP_ID = &ws_id.'||';'||chr(10)||
    '  exception when others then null;'||chr(10)||
    '  end;'||chr(10)||' '||chr(10)||
    '  -- creating item: '||fi.NAME|| ' with subscription to master app 1000'|| chr(10)||
    '  begin'||chr(10)||
    '   wwv_flow_imp_shared.create_flow_item('||chr(10)||
    '     p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)'||chr(10)||
    '    ,p_name=> '''|| fi.NAME ||''''||chr(10)||
    '    ,p_scope=>'''|| fi.SCOPE ||''''||chr(10)||
    '    ,p_protection_level=>'''||fi.PROTECTION_LEVEL ||''''||chr(10)||
    '    ,p_reference_id=>'||mi.ID||chr(10)||
    '    ,p_version_scn=>'||mi.VERSION_SCN||chr(10)||
    '    );'||chr(10)||
    '  end;'||chr(10)||
    ' ' ||chr(10)
    as sql_str -- application_items
    from master_items mi left outer join "&CURRENT_APEX_SCHEMA."."WWV_FLOW_ITEMS" fi
    on (mi.NAME = fi.NAME)
    where fi.FLOW_ID > 1000
    and (instr(fi.ID, ',') = 0 and instr(fi.ID, '.') = 0)
    order by 1, fi.FLOW_ID
    ) order by application_id, sort_id
)
union all
select ' -------------------------------------------------------------------------------' from dual;
select ' commit;' from dual;
select ' ' from dual;
select ' exception when others then rollback;' from dual;
select '    l_errm := substr(SQLERRM, 1, 2000);' from dual union all
select '    -- log run to table' from dual union all
select '    update "APEX_WWS"."APX$UPDLOG"' from dual union all
select '    set "RUN_STATUS" = ''ERROR'',' from dual union all
select '        "DESCRIPTION" = "DESCRIPTION"|| '' Task failed with: ''||l_errm;' from dual union all
select '    commit;' from dual union all
select '  raise;' from dual union all
select 'end;' from dual union all
select '/' from dual union all
select ' ' from dual union all
select 'spool off' from dual union all
select ' ' from dual;

spool off

set termout on

-------------------------------------------------------------------------------
-- run Outputfile
set echo off
PROMPT 4.) &RUN_DIR.\&SCR_NAME.
PROMPT
@@&RUN_DIR.\&SCR_NAME. &LOG_DIR.

-- Logging after run
delete from "APEX_WWS"."APX$APP_ITEMS_AFTER" where application_id <> 1000;
insert into "APEX_WWS"."APX$APP_ITEMS_AFTER"
(select * from "APEX_WWS"."APX$APP_ITEMS_V" where application_id <> 1000);

-- Logging compare
insert into "APEX_WWS"."APX$APP_ITEMS_COMPARE"
(select * from "APEX_WWS"."APX$APP_ITEMS_COMPARE_V" where application_id_b <> 1000 or application_id_a <> 1000);

commit;


-------------------------------------------------------------------------------- 
-- APEX_WWS_ApplicationItemsGenerateSQL1000.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

-------------------------------------------------------------------------------
-- Logging
delete from "APEX_WWS"."APX$APP_ITEMS_BEFORE" where application_id = 1000;

insert into "APEX_WWS"."APX$APP_ITEMS_BEFORE"
(select * from "APEX_WWS"."APX$APP_ITEMS_V" where application_id = 1000);

commit;

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as DUSR!!!';
begin
  if user != 'DUSR'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_ApplicationItemsGenerateSQL1000
define SQL_SCR=&SCR_NAME..sql
-------------------------------------------------------------------------------
PROMPT Running: &SCR_NAME.
PROMPT Apex Workspace: &ws. Workspace ID: &ws_id. Apex Host: &apxhost.
PROMPT Apex Schema: &apxusr. Apex Version: &apxver. Release Date: &release_date.
PROMPT
PROMPT ========================================================================

set termout off echo off

-- create Output File
spool &RUN_DIR.\&SQL_SCR.

-- log run to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

--------------------------------------------------------------------------------
-- Appllication = 1000 - runas DUSR
with apps
as (
    select application_id, workspace
    from "APEX_APPLICATIONS"
    where APPLICATION_ID = 1000
    and WORKSPACE = '&ws.'
    and (instr(APPLICATION_ID, ',') = 0 and instr(APPLICATION_ID, '.') = 0)
),
--------------------------------------------------------------------------------
-- AppItems as Subscriber Item to 1000
master_items
as (
    select ID, NAME, SCOPE, PROTECTION_LEVEL
    from "&CURRENT_APEX_SCHEMA."."WWV_FLOW_ITEMS"
    where FLOW_ID = 1000
    and SECURITY_GROUP_ID = &ws_id.)
--------------------------------------------------------------------------------
-- Main
select '-------------------------------------------------------------------------------------' from dual union all
select '-- Re/create all application Items for application 1000.' from dual union all
select '-- Script date: '||to_char(sysdate, 'DD.MM.YYYY HH24:MI:SS')||' - created on: &apxhost. - created by: '||user from dual union all
select '-- Add '||user||' as a parsing schema to Workspace APEX_WWS and run this script as '||user from dual union all
select '-------------------------------------------------------------------------------------' from dual union all
select 'whenever sqlerror exit sql.sqlcode rollback' from dual union all
select ' ' from dual union all
select 'set define on' from dual union all
select ' ' from dual union all
select 'define WORKSPACE_ID=&ws_id.;' from dual union all
select ' ' from dual union all
select '---- 23.1.5 (ENTW)' from dual union all
select '--define APEX_SCHEMA=APEX_230100;' from dual union all
select '--define APEX_VERSION_DATE=''2023.04.28'';' from dual union all
select '--define APEX_RELEASE=''23.1.5'';' from dual union all
select '' from dual union all
select '---- &apxver. (&apxhost.)' from dual union all
select 'define APEX_SCHEMA=''&apxusr.'';' from dual union all
select 'define APEX_VERSION_DATE=''&release_date.'';' from dual union all
select 'define APEX_RELEASE=''&apxver.'';' from dual union all
select ' ' from dual union all
select 'define LOG_DIR='||chr(38)||'1.;' from dual union all
select 'spool '||chr(38)||'LOG_DIR.\'||chr(38)||'SCR_NAME..log' from dual union all
select ' ' from dual union all
select '-- log run to table' from dual union all
select 'update "APEX_WWS"."APX$UPDLOG" set "DESCRIPTION" = ''WWS-Web Upgrade Tasks for APEX '||chr(38)||'apxver.: Running: '||chr(38)||'SQL_SCR.'';' from dual union all
select 'commit;' from dual union all
select ' ' from dual union all
select 'set feedback off echo off verify off' from dual union all
select ' ' from dual union all
select 'set echo off' from dual union all
select ' ' from dual union all
select 'declare' from dual union all
select 'l_errm varchar2(2000);' from dual union all
select 'begin' from dual union all
select ' ' from dual union all
select '  -------------------------------------------------------------------------------------' from dual union all
select '  -- Set Security Group ID' from dual union all
select '  begin' from dual union all
select '    apex_util.set_security_group_id('||chr(38)||'WORKSPACE_ID.);' from dual union all
select '  end;' from dual union all
--------------------------------------------------------------------------------
-- SubQueries
select sql_str
from (
    select sort_id, application_id, sql_str from (
    select 0 as sort_id, APPLICATION_ID, chr(10)||'  -------------------------------------------------------------------------------------'||chr(10)||
                                                  '  -- Applikation: '|| APPLICATION_ID||' Workspace: '|| WORKSPACE || chr(10)  as sql_str from apps union all
    select 1 as sort_id, APPLICATION_ID, '  begin' from apps union all
    select 2 as sort_id, APPLICATION_ID, '    wwv_flow_imp.import_begin (' from apps union all
    select 3 as sort_id, APPLICATION_ID, '    p_version_yyyy_mm_dd=>'''||chr(38)||'APEX_VERSION_DATE.''' from apps union all
    select 4 as sort_id, APPLICATION_ID, '   ,p_release=>'''||chr(38)||'APEX_RELEASE.''' from apps union all
    select 5 as sort_id, APPLICATION_ID, '   ,p_default_workspace_id=>'||chr(38)||'WORKSPACE_ID.' from apps union all
    select 6 as sort_id, APPLICATION_ID, '   ,p_default_application_id=>'||APPLICATION_ID from apps union all
    select 7 as sort_id, APPLICATION_ID, '   ,p_default_id_offset=>1408275657627430 + '|| APPLICATION_ID from apps union all
    select 8 as sort_id, APPLICATION_ID, '   ,p_default_owner=>''APEX_WWS''' from apps union all
    select 9 as sort_id, APPLICATION_ID, '   );' from apps union all
    select 10 as sort_id, APPLICATION_ID, '  end;' from apps union all
    select 11 as sort_id, APPLICATION_ID, ' ' from apps
    order by application_id, sort_id)
    union all
    --Application Items
    select sort_id, application_id, sql_str
    from (
    select rownum + 11 as sort_id, fi.FLOW_ID as application_id,
    ' -------------------------------------------------------------------------------' ||chr(10)||
    '  -- Applikation: '|| fi.FLOW_ID||' Item: '|| fi.NAME || chr(10)||' '||chr(10)||
    '  dbms_output.put_line(''Applikation: '|| fi.FLOW_ID||' Item: '|| fi.NAME||''');'||chr(10)||
    '  -- remove item: '||fi.NAME || chr(10)||
    '  begin'||chr(10)||
    '    delete from "'||chr(38)||'APEX_SCHEMA."."WWV_FLOW_ITEMS"'||chr(10)||
    '    where FLOW_ID = '|| fi.FLOW_ID|| chr(10)||
    '    and NAME = '''||fi.NAME||''''||chr(10)||
    '    and SECURITY_GROUP_ID = '||chr(38)||'WORKSPACE_ID.'||';'||chr(10)||
    '  exception when others then null;'||chr(10)||
    '  end;'||chr(10)||' '||chr(10)|| case when mi.NAME != 'AI_AKTUAL_APP_ID' then
    '  -- creating item: '||fi.NAME|| ' for master app 1000'|| chr(10)||
    '  begin'||chr(10)||
    '   wwv_flow_imp_shared.create_flow_item('||chr(10)||
    '     p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)'||chr(10)||
    '    ,p_name=> '''|| fi.NAME ||''''||chr(10)||
    '    ,p_scope=>'''|| fi.SCOPE ||''''||chr(10)||
    '    ,p_protection_level=>'''||fi.PROTECTION_LEVEL ||''''||chr(10)||
--    '    ,p_reference_id=>'||mi.ID||chr(10)||
    '    ,p_version_scn=>1'||chr(10)||
    '    );'||chr(10)||
    '  end;'||chr(10)||
    ' ' end ||chr(10) as sql_str -- application_items
    from master_items mi left outer join "&CURRENT_APEX_SCHEMA."."WWV_FLOW_ITEMS" fi
    on (mi.NAME = fi.NAME)
    where fi.FLOW_ID = 1000
    and (instr(fi.ID, ',') = 0 and instr(fi.ID, '.') = 0)
    order by 1, fi.FLOW_ID
    ) order by application_id, sort_id
)
union all
select ' -------------------------------------------------------------------------------' from dual;
select ' commit;' from dual;
select ' ' from dual;
select ' exception when others then rollback;' from dual;
select '    l_errm := substr(SQLERRM, 1, 2000);' from dual union all
select '    -- log run to table' from dual union all
select '    update "APEX_WWS"."APX$UPDLOG"' from dual union all
select '    set "RUN_STATUS" = ''ERROR'',' from dual union all
select '        "DESCRIPTION" = "DESCRIPTION"|| '' Task failed with: ''||l_errm;' from dual union all
select '    commit;' from dual union all
select '  raise;' from dual union all
select 'end;' from dual union all
select '/' from dual union all
select ' ' from dual union all
select 'spool off' from dual union all
select ' ' from dual;

spool off

set termout on
-------------------------------------------------------------------------------
-- run Outputfile
set echo off
PROMPT 2.) &RUN_DIR.\&SCR_NAME.
PROMPT
@@&RUN_DIR.\&SCR_NAME. &LOG_DIR.

-- Logging after run
delete from "APEX_WWS"."APX$APP_ITEMS_AFTER" where application_id = 1000;

insert into "APEX_WWS"."APX$APP_ITEMS_AFTER"
(select * from "APEX_WWS"."APX$APP_ITEMS_V" where application_id = 1000);

-- Logging compare
insert into "APEX_WWS"."APX$APP_ITEMS_COMPARE"
(select * from "APEX_WWS"."APX$APP_ITEMS_COMPARE_V" where application_id_b = 1000 or application_id_a = 1000);

commit;


-------------------------------------------------------------------------------- 
-- APEX_WWS_ApplicationProcessesGenerateSQL.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

-------------------------------------------------------------------------------
-- Logging
delete from "APEX_WWS"."APX$APP_PROCESSES_BEFORE" where application_id <> 1000;
insert into "APEX_WWS"."APX$APP_PROCESSES_BEFORE"
(select * from "APEX_WWS"."APX$APP_PROCESSES_V" where application_id <> 1000);
commit;

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as DUSR!!!';
begin
  if user != 'DUSR'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_ApplicationProcessesAll
define SQL_SCR=&SCR_NAME..sql

-------------------------------------------------------------------------------
PROMPT Running: &SCR_NAME.
PROMPT Apex Workspace: &ws. Workspace ID: &ws_id. Apex Host: &apxhost.
PROMPT Apex Schema: &apxusr. Apex Version: &apxver. Release Date: &release_date.
PROMPT
PROMPT ========================================================================

set termout off echo off

-- create Output File
spool &RUN_DIR.\&SQL_SCR.

-- log run to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

--------------------------------------------------------------------------------
-- Appllications <> 1000 - runas DUSR
with apps
as (
    select application_id, workspace
    from APEX_APPLICATIONS
    where APPLICATION_ID > 1000
    and WORKSPACE = 'APEX_WWS'
    and (instr(APPLICATION_ID, ',') = 0 and instr(APPLICATION_ID, '.') = 0)
    ),
--------------------------------------------------------------------------------
-- AppProcesses as Subscriber Item to 1000
fp --FLOW_PROCESSING
as (
    select p.ID, p.FLOW_ID, p.PROCESS_SEQUENCE, p.PROCESS_POINT, p.PROCESS_TYPE,
           p.PROCESS_NAME, p.REQUIRED_PATCH, p.VERSION_SCN
    from "&CURRENT_APEX_SCHEMA."."WWV_FLOW_PROCESSING" p,
         "&CURRENT_APEX_SCHEMA."."WWV_FLOW_AUTHORIZED" f
   where f.workspace_id   = p.security_group_id
     and f.application_id = p.flow_id
     and p.flow_id = 1000
     and f.workspace_id = &ws_id.
),
prc_code
as (
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: INIT_USER' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: INIT_USER'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: INIT_USER' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''INIT_USER''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: INIT_USER with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'INIT_USER')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'INIT_USER') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'INIT_USER') from dual union all
    select '      ,p_process_point=>''AFTER_LOGIN''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''INIT_USER''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''BEGIN'',' from dual union all
    select '      ''    apx_user_p.pr_init ( p_ckennung                    => :APP_USER'',' from dual union all
    select '      ''                       , p_nout_mpid                   => :AI_MPID'',' from dual union all
    select '      ''                       , p_nout_rolle_nr_ident         => :AI_ROLLE_NR_IDENT'',' from dual union all
    select '      ''                       , p_nout_mitarb_firma_nr        => :AI_MITARB_FIRMA_NR'',' from dual union all
    select '      ''                       , p_nout_mitarb_nr_ident        => :AI_MITARB_NR_IDENT'',' from dual union all
    select '      ''                       , p_cout_form_sprache_code      => :AI_FORM_SPRACHE_CODE'',' from dual union all
    select '      ''                       , p_cout_form_sprache           => :AI_FORM_SPRACHE'',' from dual union all
    select '      ''                       , p_cout_fsp_language_pref      => :FSP_LANGUAGE_PREFERENCE'',' from dual union all
    select '      ''                       , p_cout_hilfe_sprache          => :AI_HILFE_SPRACHE'',' from dual union all
    select '      ''                       , p_cout_druck_sprache_code     => :AI_DRUCK_SPRACHE_CODE'',' from dual union all
    select '      ''                       , p_cout_druck_sprache          => :AI_DRUCK_SPRACHE'',' from dual union all
    select '      ''                       , p_nout_firma_nr               => :AI_FIRMA_NR'',' from dual union all
    select '      ''                       , p_nout_lager_nr               => :AI_LAGER_NR'',' from dual union all
    select '      ''                       , p_cout_waehrung               => :AI_WAEHRUNG'',' from dual union all
    select '      ''                       , p_cout_firma_bezeichnung      => :AI_FIRMA_BEZEICHNUNG'',' from dual union all
    select '      ''                       , p_nout_firma_nr_verwalter     => :AI_FIRMA_NR_VERWALTER'',' from dual union all
    select '      ''                       , p_nout_firma_nr_awr           => :AI_FIRMA_NR_AWR'',' from dual union all
    select '      ''                       , p_nout_firma_nr_artikelraum_hw => :AI_FIRMA_NR_ARTIKELRAUM_HW'',' from dual union all
    select '      ''                       , p_nout_firma_ist_ein_awr      => :AI_FIRMA_IST_EIN_AWR'',' from dual union all
    select '      ''                       , p_nout_firma_ref_typ          => :AI_FIRMA_REF_TYP'',' from dual union all
    select '      ''                       , p_nout_tooltips_anzeigen      => :AI_TOOLTIPS_ANZEIGEN'',' from dual union all
    select '      ''                       , p_cout_menu                   => :AI_MENU_WWS'',' from dual union all
    select '      ''                       , p_cout_theme                  => :AI_THEME);'',' from dual union all
    select '      ''    '',' from dual union all
    select '      ''    apx_app_p.pr_get_firma_style (p_nfirma_nr        => :AI_FIRMA_NR'',' from dual union all
    select '      ''                                 ,p_cout_logo_name   => :AI_LOGO'',' from dual union all
    select '      ''                                 ,p_cout_style_name  => :AI_THEME_STYLE'',' from dual union all
    select '      ''                                 ,p_cout_css_name    => :AI_CSS'',' from dual union all
    select '      ''                                 );'',' from dual union all
    select '      '''',' from dual union all
    select '      ''    apex_theme.set_session_style ( p_name            => :AI_THEME_STYLE );'',' from dual union all
    select '      '''',' from dual union all
    select '      ''END;''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>'':AI_MPID IS NULL''' from dual union all
    select '      ,p_process_when_type=>''EXPRESSION''' from dual union all
    select '      ,p_process_when2=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: INIT_APP' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: INIT_APP'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: INIT_APP' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''INIT_APP''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: INIT_APP with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'INIT_APP')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'INIT_APP') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'INIT_APP') from dual union all
    select '      ,p_process_point=>''AFTER_LOGIN''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''INIT_APP''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''apx_app_p.pr_init (p_napp_id                           => :APP_ID'',' from dual union all
    select '      ''                  ,p_nout_appgru_nr                    => :AI_APPGRU_NR'',' from dual union all
    select '      ''                  ,p_nout_tracemode                    => :AI_TRACEMODE'',' from dual union all
    select '      ''                  ,p_nout_tracelevel                   => :AI_TRACELEVEL                  '',' from dual union all
    select '      ''                  ,p_cout_db_instanz                   => :AI_DB_INSTANCE            '',' from dual union all
    select '      ''                  ,p_cout_tns_name                     => :AI_TNS_NAME'',' from dual union all
    select '      ''                  );''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>'':AI_APPGRU_NR IS NULL''' from dual union all
    select '      ,p_process_when_type=>''EXPRESSION''' from dual union all
    select '      ,p_process_when2=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_LANGUAGE' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_LANGUAGE'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_LANGUAGE' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_LANGUAGE''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_LANGUAGE with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_LANGUAGE')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_LANGUAGE') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_LANGUAGE') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_LANGUAGE''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''begin'',' from dual union all
    select '      ''owa_util.redirect_url(''''f?p=''''||:APP_ID||'''':''''||:APP_PAGE_ID||'''':''''||:APP_SESSION);'',' from dual union all
    select '      ''end;''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>''LANG''' from dual union all
    select '      ,p_process_when_type=>''REQUEST_EQUALS_CONDITION''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_AI_SCHALTER_FIRMENWECHSEL' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_AI_SCHALTER_FIRMENWECHSEL'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_AI_SCHALTER_FIRMENWECHSEL' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_AI_SCHALTER_FIRMENWECHSEL''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_AI_SCHALTER_FIRMENWECHSEL with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_AI_SCHALTER_FIRMENWECHSEL')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_AI_SCHALTER_FIRMENWECHSEL') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_AI_SCHALTER_FIRMENWECHSEL') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_AI_SCHALTER_FIRMENWECHSEL''' from dual union all
    select '      ,p_process_sql_clob=>'':AI_SCHALTER_FIRMENWECHSEL := 127;''' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''SELECT 1 '',' from dual union all
    select '      ''  FROM APEX_APPLICATION_PAGES '',' from dual union all
    select '      '' WHERE application_id = :APP_ID '',' from dual union all
    select '      ''   AND page_id = :APP_PAGE_ID '',' from dual union all
    select '      ''   AND UPPER(page_mode) = ''''NORMAL'''';''))' from dual union all
    select '      ,p_process_when_type=>''EXISTS''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_AI_MENU_WWS' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_AI_MENU_WWS'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_AI_MENU_WWS' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_AI_MENU_WWS''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_AI_MENU_WWS with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_AI_MENU_WWS')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_AI_MENU_WWS') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_AI_MENU_WWS') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_AI_MENU_WWS''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''   apx_navigation_p.pr_set_menue_wws (p_napp_page_id           => :APP_PAGE_ID'',' from dual union all
    select '      ''                                     ,p_napp_id                => :APP_ID'',' from dual union all
    select '      ''                                     ,p_cout_menu_wws          => :AI_MENU_WWS'',' from dual union all
    select '      ''                                     ,p_cout_menu_wws_wechsel  => :AI_MENU_WWS_WECHSEL'',' from dual union all
    select '      ''                                     );''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_THEME_STYLE' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_THEME_STYLE - remove only.'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_THEME_STYLE' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_THEME_STYLE''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    -- select ' ' from dual union all
    -- select '  -- creating Process: SET_THEME_STYLE with subscription to master app 1000' from dual union all
    -- select '  begin' from dual union all
    -- select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    -- select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_THEME_STYLE')||')' from dual union all
    -- select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_THEME_STYLE') from dual union all
    -- select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_THEME_STYLE') from dual union all
    -- select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    -- select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    -- select '      ,p_process_name=>''SET_THEME_STYLE''' from dual union all
    -- select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    -- select '      ''apex_theme.set_session_style (p_name            => :AI_THEME_STYLE );'',' from dual union all
    -- select '      '''',' from dual union all
    -- select '      '':AI_AKTUAL_APP_ID := :APP_ID;''))' from dual union all
    -- select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    -- select '      ,p_process_when=>''NVL(:AI_AKTUAL_APP_ID,-1) <> :APP_ID''' from dual union all
    -- select '      ,p_process_when_type=>''EXPRESSION''' from dual union all
    -- select '      ,p_process_when2=>''PLSQL''' from dual union all
    -- select '  );' from dual union all
    -- select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_HILFE_URL' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_HILFE_URL'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_HILFE_URL' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_HILFE_URL''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_HILFE_URL with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_HILFE_URL')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_HILFE_URL') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_HILFE_URL') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_HILFE_URL''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''BEGIN'',' from dual union all
    select '      ''    apx_app_p.pr_get_hilfe_url( p_napp_id             => :APP_ID'',' from dual union all
    select '      ''                              , p_npage_id            => :APP_PAGE_ID'',' from dual union all
    select '      ''                              , p_csprache            => :AI_HILFE_SPRACHE '',' from dual union all
    select '      ''                              , p_cout_hilfelink      => :P0_HILFE_URL'',' from dual union all
    select '      ''                              , p_cout_item_hilfelink => :P0_ITEMHILFE_URL'',' from dual union all
    select '      ''                              );'',' from dual union all
    select '      ''END;''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''SELECT 1 '',' from dual union all
    select '      ''  FROM APEX_APPLICATION_PAGES '',' from dual union all
    select '      '' WHERE application_id = :APP_ID '',' from dual union all
    select '      ''   AND page_id = :APP_PAGE_ID '',' from dual union all
    select '      ''   AND UPPER(page_mode) = ''''NORMAL'''';''))' from dual union all
    select '      ,p_process_when_type=>''EXISTS''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_TOOLTIPS_ANZEIGEN' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_TOOLTIPS_ANZEIGEN'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_TOOLTIPS_ANZEIGEN' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_TOOLTIPS_ANZEIGEN''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_TOOLTIPS_ANZEIGEN with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_TOOLTIPS_ANZEIGEN')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_TOOLTIPS_ANZEIGEN') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_TOOLTIPS_ANZEIGEN') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_TOOLTIPS_ANZEIGEN''' from dual union all
    select '      ,p_process_sql_clob=>'':P0_TOOLTIPS_ANZEIGEN := :AI_TOOLTIPS_ANZEIGEN;''' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_TRACELEVEL' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_TRACELEVEL'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_TRACELEVEL' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_TRACELEVEL''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_TRACELEVEL with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_TRACELEVEL')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_TRACELEVEL') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_TRACELEVEL') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_TRACELEVEL''' from dual union all
    select '      ,p_process_sql_clob=>'':P0_TRACELEVEL := :AI_TRACELEVEL;''' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual
)
--------------------------------------------------------------------------------
-- Main
select '-------------------------------------------------------------------------------------' from dual union all
select '-- Recreate all application Processes for all applications other than 1000.' from dual union all
select '-- Script date: '||to_char(sysdate, 'DD.MM.YYYY HH24:MI:SS')||' - created on: '||(select upper(host_name) from V$INSTANCE)||' - created by: '||user from dual union all
select '-- Add '||user||' as a parsing schema to Workspace APEX_WWS and run this script as '||user from dual union all
select '-------------------------------------------------------------------------------------' from dual union all
select 'whenever sqlerror exit sql.sqlcode rollback' from dual union all
select ' ' from dual union all
select 'set define on' from dual union all
select '' from dual union all
select 'define WORKSPACE_ID=&ws_id.' from dual union all
select '' from dual union all
select '---- 23.1.5 (ENTW)' from dual union all
select '--define APEX_SCHEMA=APEX_230100;' from dual union all
select '--define APEX_VERSION_DATE=''2023.04.28'';' from dual union all
select '--define APEX_RELEASE=''23.1.5'';' from dual union all
select '' from dual union all
select '---- &apxver. (&apxhost.)' from dual union all
select 'define APEX_SCHEMA=''&apxusr.'';' from dual union all
select 'define APEX_VERSION_DATE=''&release_date.'';' from dual union all
select 'define APEX_RELEASE=''&apxver.'';' from dual union all
select ' ' from dual union all
select 'set echo off feedback off verify off' from dual union all
select ' ' from dual union all
select 'define LOG_DIR='||chr(38)||'1.;' from dual union all
select 'spool '||chr(38)||'LOG_DIR.\'||chr(38)||'SCR_NAME..log' from dual union all
select ' ' from dual union all
select '-- log run to table' from dual union all
select 'update "APEX_WWS"."APX$UPDLOG" set "DESCRIPTION" = ''WWS-Web Upgrade Tasks for APEX '||chr(38)||'apxver.: Running: '||chr(38)||'SQL_SCR.'';' from dual union all
select 'commit;' from dual union all
select ' ' from dual union all
select 'set echo off' from dual union all
select ' ' from dual union all
select 'declare' from dual union all
select 'l_errm varchar2(2000);' from dual union all
select 'begin' from dual union all
select ' ' from dual union all
select '  -------------------------------------------------------------------------------------' from dual union all
select '  -- Set Security Group ID' from dual union all
select '  for c1 in (select workspace_id' from dual union all
select '             from apex_workspaces' from dual union all
select '             where workspace = ''APEX_WWS'') loop' from dual union all
select '    apex_util.set_security_group_id( c1.workspace_id );' from dual union all
select '    exit;' from dual union all
select '  end loop;' from dual union all
--------------------------------------------------------------------------------
-- SubQueries
select sql_str
from (
    select sort_id, application_id, sql_str from (
    select 0 as sort_id, APPLICATION_ID, chr(10)||'  -------------------------------------------------------------------------------------'||chr(10)||
                                                  '  -- Applikation: '|| APPLICATION_ID||' Workspace: '|| WORKSPACE || chr(10)  as sql_str from apps union all
    select 1 as sort_id, APPLICATION_ID, '  begin' from apps union all
    select 2 as sort_id, APPLICATION_ID, '    wwv_flow_imp.import_begin (' from apps union all
    select 3 as sort_id, APPLICATION_ID, '    p_version_yyyy_mm_dd=>'''||chr(38)||'APEX_VERSION_DATE.''' from apps union all
    select 4 as sort_id, APPLICATION_ID, '   ,p_release=>'''||chr(38)||'APEX_RELEASE.''' from apps union all
    select 5 as sort_id, APPLICATION_ID, '   ,p_default_workspace_id=>&ws_id.' from apps union all
    select 6 as sort_id, APPLICATION_ID, '   ,p_default_application_id=>'||APPLICATION_ID from apps union all
    select 7 as sort_id, APPLICATION_ID, '   ,p_default_id_offset=>1408275657627430 + '|| APPLICATION_ID from apps union all
    select 8 as sort_id, APPLICATION_ID, '   ,p_default_owner=>''APEX_WWS''' from apps union all
    select 9 as sort_id, APPLICATION_ID, '   );' from apps union all
    select 10 as sort_id, APPLICATION_ID, '  end;' from apps union all
    select 11 as sort_id, APPLICATION_ID, ' ' from apps
    order by application_id, sort_id)
    union all
    --Application Process Header
    select sort_id, application_id, sql_str
    from (
    select rownum + 11 as sort_id, a.APPLICATION_ID, replace(c.sql_str, '#APP_ID#', a.APPLICATION_ID) as sql_str
    from prc_code c, apps a
    order by 1, a.APPLICATION_ID
    ) order by application_id, sort_id
)
union all
select ' -------------------------------------------------------------------------------' from dual;
select ' commit;' from dual;
select ' ' from dual;
select ' exception when others then rollback;' from dual;
select '    l_errm := substr(SQLERRM, 1, 2000);' from dual union all
select '    -- log run to table' from dual union all
select '    update "APEX_WWS"."APX$UPDLOG"' from dual union all
select '    set "RUN_STATUS" = ''ERROR'',' from dual union all
select '        "DESCRIPTION" = "DESCRIPTION"|| '' Task failed with: ''||l_errm;' from dual union all
select '    commit;' from dual union all
select '  raise;' from dual union all
select 'end;' from dual union all
select '/' from dual union all
select ' ' from dual union all
select 'spool off' from dual union all
select ' ' from dual;


spool off

set termout on

-------------------------------------------------------------------------------
-- run Outputfile
set echo off
PROMPT 8.) &RUN_DIR.\&SCR_NAME.
PROMPT
@@&RUN_DIR.\&SCR_NAME. &LOG_DIR.

-- Logging after run
delete from "APEX_WWS"."APX$APP_PROCESSES_AFTER" where application_id <> 1000;
insert into "APEX_WWS"."APX$APP_PROCESSES_AFTER"
(select * from "APEX_WWS"."APX$APP_PROCESSES_V" where application_id <> 1000);
-- Logging compare
insert into "APEX_WWS"."APX$APP_PROCESSES_COMPARE"
(select * from "APEX_WWS"."APX$APP_PROCESSES_COMPARE_V" where application_id_b <> 1000 or application_id_a <> 1000);
commit;


-------------------------------------------------------------------------------- 
-- APEX_WWS_ApplicationProcessesGenerateSQL1000.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

-------------------------------------------------------------------------------
-- Logging
delete from "APEX_WWS"."APX$APP_PROCESSES_BEFORE" where application_id = 1000;
insert into "APEX_WWS"."APX$APP_PROCESSES_BEFORE"
(select * from "APEX_WWS"."APX$APP_PROCESSES_V" where application_id = 1000);
commit;

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as DUSR!!!';
begin
  if user != 'DUSR'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_ApplicationProcesses1000
define SQL_SCR=&SCR_NAME..sql

-------------------------------------------------------------------------------
PROMPT Running: &SCR_NAME.
PROMPT Apex Workspace: &ws. Workspace ID: &ws_id. Apex Host: &apxhost.
PROMPT Apex Schema: &apxusr. Apex Version: &apxver. Release Date: &release_date.
PROMPT
PROMPT ========================================================================

set termout off echo off

-- create Output File
spool &RUN_DIR.\&SQL_SCR.

-- log run to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

--------------------------------------------------------------------------------
-- Appllication 1000 - runas DUSR
with apps
as (
    select application_id, workspace
    from APEX_APPLICATIONS
    where APPLICATION_ID = 1000
    and WORKSPACE = 'APEX_WWS'
    and (instr(APPLICATION_ID, ',') = 0 and instr(APPLICATION_ID, '.') = 0)
    ),
--------------------------------------------------------------------------------
-- AppProcesses as copy of 1100
fp --FLOW_PROCESSING
as (
    select p.ID, p.FLOW_ID, p.PROCESS_SEQUENCE, p.PROCESS_POINT, p.PROCESS_TYPE,
           p.PROCESS_NAME, p.REQUIRED_PATCH, p.VERSION_SCN
    from "&CURRENT_APEX_SCHEMA."."WWV_FLOW_PROCESSING" p,
         "&CURRENT_APEX_SCHEMA."."WWV_FLOW_AUTHORIZED" f
   where f.workspace_id   = p.security_group_id
     and f.application_id = p.flow_id
     and p.flow_id = 1100
     and f.workspace_id = &ws_id.
),
prc_code
as (
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: INIT_USER' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: INIT_USER'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: INIT_USER' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''INIT_USER''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: INIT_USER with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'INIT_USER')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'INIT_USER') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'INIT_USER') from dual union all
    select '      ,p_process_point=>''AFTER_LOGIN''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''INIT_USER''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''BEGIN'',' from dual union all
    select '      ''    apx_user_p.pr_init ( p_ckennung                    => :APP_USER'',' from dual union all
    select '      ''                       , p_nout_mpid                   => :AI_MPID'',' from dual union all
    select '      ''                       , p_nout_rolle_nr_ident         => :AI_ROLLE_NR_IDENT'',' from dual union all
    select '      ''                       , p_nout_mitarb_firma_nr        => :AI_MITARB_FIRMA_NR'',' from dual union all
    select '      ''                       , p_nout_mitarb_nr_ident        => :AI_MITARB_NR_IDENT'',' from dual union all
    select '      ''                       , p_cout_form_sprache_code      => :AI_FORM_SPRACHE_CODE'',' from dual union all
    select '      ''                       , p_cout_form_sprache           => :AI_FORM_SPRACHE'',' from dual union all
    select '      ''                       , p_cout_fsp_language_pref      => :FSP_LANGUAGE_PREFERENCE'',' from dual union all
    select '      ''                       , p_cout_hilfe_sprache          => :AI_HILFE_SPRACHE'',' from dual union all
    select '      ''                       , p_cout_druck_sprache_code     => :AI_DRUCK_SPRACHE_CODE'',' from dual union all
    select '      ''                       , p_cout_druck_sprache          => :AI_DRUCK_SPRACHE'',' from dual union all
    select '      ''                       , p_nout_firma_nr               => :AI_FIRMA_NR'',' from dual union all
    select '      ''                       , p_nout_lager_nr               => :AI_LAGER_NR'',' from dual union all
    select '      ''                       , p_cout_waehrung               => :AI_WAEHRUNG'',' from dual union all
    select '      ''                       , p_cout_firma_bezeichnung      => :AI_FIRMA_BEZEICHNUNG'',' from dual union all
    select '      ''                       , p_nout_firma_nr_verwalter     => :AI_FIRMA_NR_VERWALTER'',' from dual union all
    select '      ''                       , p_nout_firma_nr_awr           => :AI_FIRMA_NR_AWR'',' from dual union all
    select '      ''                       , p_nout_firma_nr_artikelraum_hw => :AI_FIRMA_NR_ARTIKELRAUM_HW'',' from dual union all
    select '      ''                       , p_nout_firma_ist_ein_awr      => :AI_FIRMA_IST_EIN_AWR'',' from dual union all
    select '      ''                       , p_nout_firma_ref_typ          => :AI_FIRMA_REF_TYP'',' from dual union all
    select '      ''                       , p_nout_tooltips_anzeigen      => :AI_TOOLTIPS_ANZEIGEN'',' from dual union all
    select '      ''                       , p_cout_menu                   => :AI_MENU_WWS'',' from dual union all
    select '      ''                       , p_cout_theme                  => :AI_THEME);'',' from dual union all
    select '      ''    '',' from dual union all
    select '      ''    apx_app_p.pr_get_firma_style (p_nfirma_nr        => :AI_FIRMA_NR'',' from dual union all
    select '      ''                                 ,p_cout_logo_name   => :AI_LOGO'',' from dual union all
    select '      ''                                 ,p_cout_style_name  => :AI_THEME_STYLE'',' from dual union all
    select '      ''                                 ,p_cout_css_name    => :AI_CSS'',' from dual union all
    select '      ''                                 );'',' from dual union all
    select '      '''',' from dual union all
    select '      ''    apex_theme.set_session_style ( p_name            => :AI_THEME_STYLE );'',' from dual union all
    select '      '''',' from dual union all
    select '      ''END;''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>'':AI_MPID IS NULL''' from dual union all
    select '      ,p_process_when_type=>''EXPRESSION''' from dual union all
    select '      ,p_process_when2=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: INIT_APP' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: INIT_APP'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: INIT_APP' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''INIT_APP''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: INIT_APP with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'INIT_APP')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'INIT_APP') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'INIT_APP') from dual union all
    select '      ,p_process_point=>''AFTER_LOGIN''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''INIT_APP''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''apx_app_p.pr_init (p_napp_id                           => :APP_ID'',' from dual union all
    select '      ''                  ,p_nout_appgru_nr                    => :AI_APPGRU_NR'',' from dual union all
    select '      ''                  ,p_nout_tracemode                    => :AI_TRACEMODE'',' from dual union all
    select '      ''                  ,p_nout_tracelevel                   => :AI_TRACELEVEL                  '',' from dual union all
    select '      ''                  ,p_cout_db_instanz                   => :AI_DB_INSTANCE            '',' from dual union all
    select '      ''                  ,p_cout_tns_name                     => :AI_TNS_NAME'',' from dual union all
    select '      ''                  );''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>'':AI_APPGRU_NR IS NULL''' from dual union all
    select '      ,p_process_when_type=>''EXPRESSION''' from dual union all
    select '      ,p_process_when2=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_LANGUAGE' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_LANGUAGE'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_LANGUAGE' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_LANGUAGE''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_LANGUAGE with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_LANGUAGE')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_LANGUAGE') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_LANGUAGE') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_LANGUAGE''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''begin'',' from dual union all
    select '      ''owa_util.redirect_url(''''f?p=''''||:APP_ID||'''':''''||:APP_PAGE_ID||'''':''''||:APP_SESSION);'',' from dual union all
    select '      ''end;''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>''LANG''' from dual union all
    select '      ,p_process_when_type=>''REQUEST_EQUALS_CONDITION''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_AI_SCHALTER_FIRMENWECHSEL' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_AI_SCHALTER_FIRMENWECHSEL'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_AI_SCHALTER_FIRMENWECHSEL' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_AI_SCHALTER_FIRMENWECHSEL''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_AI_SCHALTER_FIRMENWECHSEL with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_AI_SCHALTER_FIRMENWECHSEL')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_AI_SCHALTER_FIRMENWECHSEL') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_AI_SCHALTER_FIRMENWECHSEL') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_AI_SCHALTER_FIRMENWECHSEL''' from dual union all
    select '      ,p_process_sql_clob=>'':AI_SCHALTER_FIRMENWECHSEL := 127;''' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''SELECT 1 '',' from dual union all
    select '      ''  FROM APEX_APPLICATION_PAGES '',' from dual union all
    select '      '' WHERE application_id = :APP_ID '',' from dual union all
    select '      ''   AND page_id = :APP_PAGE_ID '',' from dual union all
    select '      ''   AND UPPER(page_mode) = ''''NORMAL'''';''))' from dual union all
    select '      ,p_process_when_type=>''EXISTS''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_AI_MENU_WWS' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_AI_MENU_WWS'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_AI_MENU_WWS' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_AI_MENU_WWS''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_AI_MENU_WWS with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_AI_MENU_WWS')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_AI_MENU_WWS') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_AI_MENU_WWS') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_AI_MENU_WWS''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''   apx_navigation_p.pr_set_menue_wws (p_napp_page_id           => :APP_PAGE_ID'',' from dual union all
    select '      ''                                     ,p_napp_id                => :APP_ID'',' from dual union all
    select '      ''                                     ,p_cout_menu_wws          => :AI_MENU_WWS'',' from dual union all
    select '      ''                                     ,p_cout_menu_wws_wechsel  => :AI_MENU_WWS_WECHSEL'',' from dual union all
    select '      ''                                     );''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_ITEMHILFE_URL' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_ITEMHILFE_URL'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_ITEMHILFE_URL' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_ITEMHILFE_URL''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_THEME_STYLE' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_THEME_STYLE - remove only.'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_THEME_STYLE' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_THEME_STYLE''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    -- select ' ' from dual union all
    -- select '  -- creating Process: SET_THEME_STYLE with subscription to master app 1000' from dual union all
    -- select '  begin' from dual union all
    -- select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    -- select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_THEME_STYLE')||')' from dual union all
    -- select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_THEME_STYLE') from dual union all
    -- select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_THEME_STYLE') from dual union all
    -- select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    -- select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    -- select '      ,p_process_name=>''SET_THEME_STYLE''' from dual union all
    -- select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    -- select '      ''apex_theme.set_session_style (p_name            => :AI_THEME_STYLE );'',' from dual union all
    -- select '      '''',' from dual union all
    -- select '      '':AI_AKTUAL_APP_ID := :APP_ID;''))' from dual union all
    -- select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    -- select '      ,p_process_when=>''NVL(:AI_AKTUAL_APP_ID,-1) <> :APP_ID''' from dual union all
    -- select '      ,p_process_when_type=>''EXPRESSION''' from dual union all
    -- select '      ,p_process_when2=>''PLSQL''' from dual union all
    -- select '  );' from dual union all
    -- select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_HILFE_URL' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_HILFE_URL'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_HILFE_URL' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_HILFE_URL''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_HILFE_URL with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_HILFE_URL')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_HILFE_URL') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_HILFE_URL') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_HILFE_URL''' from dual union all
    select '      ,p_process_sql_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''BEGIN'',' from dual union all
    select '      ''    apx_app_p.pr_get_hilfe_url( p_napp_id             => :APP_ID'',' from dual union all
    select '      ''                              , p_npage_id            => :APP_PAGE_ID'',' from dual union all
    select '      ''                              , p_csprache            => :AI_HILFE_SPRACHE '',' from dual union all
    select '      ''                              , p_cout_hilfelink      => :P0_HILFE_URL'',' from dual union all
    select '      ''                              , p_cout_item_hilfelink => :P0_ITEMHILFE_URL'',' from dual union all
    select '      ''                              );'',' from dual union all
    select '      ''END;''))' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '      ,p_process_when=>wwv_flow_string.join(wwv_flow_t_varchar2(' from dual union all
    select '      ''SELECT 1 '',' from dual union all
    select '      ''  FROM APEX_APPLICATION_PAGES '',' from dual union all
    select '      '' WHERE application_id = :APP_ID '',' from dual union all
    select '      ''   AND page_id = :APP_PAGE_ID '',' from dual union all
    select '      ''   AND UPPER(page_mode) = ''''NORMAL'''';''))' from dual union all
    select '      ,p_process_when_type=>''EXISTS''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_TOOLTIPS_ANZEIGEN' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_TOOLTIPS_ANZEIGEN'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_TOOLTIPS_ANZEIGEN' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_TOOLTIPS_ANZEIGEN''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_TOOLTIPS_ANZEIGEN with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_TOOLTIPS_ANZEIGEN')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_TOOLTIPS_ANZEIGEN') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_TOOLTIPS_ANZEIGEN') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_TOOLTIPS_ANZEIGEN''' from dual union all
    select '      ,p_process_sql_clob=>'':P0_TOOLTIPS_ANZEIGEN := :AI_TOOLTIPS_ANZEIGEN;''' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual union all
    select '-------------------------------------------------------------------------------' as sql_str from dual union all
    select '-- Applikation: #APP_ID# Process: SET_TRACELEVEL' from dual union all
    select ' ' from dual union all
    select '  dbms_output.put_line(''Applikation: #APP_ID# Process: SET_TRACELEVEL'');' from dual union all
    select ' ' from dual union all
    select '  -- remove processes: SET_TRACELEVEL' from dual union all
    select '  begin' from dual union all
    select '    delete from "APEX_230200"."WWV_FLOW_PROCESSING"' from dual union all
    select '    where FLOW_ID = #APP_ID#' from dual union all
    select '    and PROCESS_NAME = ''SET_TRACELEVEL''' from dual union all
    select '    and SECURITY_GROUP_ID = &ws_id.;' from dual union all
    select '  exception when others then null;' from dual union all
    select '  end;' from dual union all
    select ' ' from dual union all
    select '  -- creating Process: SET_TRACELEVEL with subscription to master app 1000' from dual union all
    select '  begin' from dual union all
    select '  wwv_flow_imp_shared.create_flow_process(' from dual union all
    select '       p_id=>wwv_flow_imp.id(wwv_flow_id.next_val)' from dual union all
    -- select '      ,p_reference_id=>wwv_flow_imp.id('||(select ID from fp where PROCESS_NAME = 'SET_TRACELEVEL')||')' from dual union all
    select '      ,p_process_sequence=>'||(select PROCESS_SEQUENCE from fp where PROCESS_NAME = 'SET_TRACELEVEL') from dual union all
    select '      ,p_version_scn=>'||(select VERSION_SCN from fp where PROCESS_NAME = 'SET_TRACELEVEL') from dual union all
    select '      ,p_process_point=>''BEFORE_HEADER''' from dual union all
    select '      ,p_process_type=>''NATIVE_PLSQL''' from dual union all
    select '      ,p_process_name=>''SET_TRACELEVEL''' from dual union all
    select '      ,p_process_sql_clob=>'':P0_TRACELEVEL := :AI_TRACELEVEL;''' from dual union all
    select '      ,p_process_clob_language=>''PLSQL''' from dual union all
    select '  );' from dual union all
    select '  end;' from dual union all
    select '  ' from dual
)
--------------------------------------------------------------------------------
-- Main
select '-------------------------------------------------------------------------------------' from dual union all
select '-- Recreate all application Processes for all applications other than 1000.' from dual union all
select '-- Script date: '||to_char(sysdate, 'DD.MM.YYYY HH24:MI:SS')||' - created on: '||(select upper(host_name) from V$INSTANCE)||' - created by: '||user from dual union all
select '-- Add '||user||' as a parsing schema to Workspace APEX_WWS and run this script as '||user from dual union all
select '-------------------------------------------------------------------------------------' from dual union all
select 'whenever sqlerror exit sql.sqlcode rollback' from dual union all
select ' ' from dual union all
select 'set define on' from dual union all
select '' from dual union all
select 'define WORKSPACE_ID=&ws_id.' from dual union all
select '' from dual union all
select '---- 23.1.5 (ENTW)' from dual union all
select '--define APEX_SCHEMA=APEX_230100;' from dual union all
select '--define APEX_VERSION_DATE=''2023.04.28'';' from dual union all
select '--define APEX_RELEASE=''23.1.5'';' from dual union all
select '' from dual union all
select '---- &apxver. (&apxhost.)' from dual union all
select 'define APEX_SCHEMA=''&apxusr.'';' from dual union all
select 'define APEX_VERSION_DATE=''&release_date.'';' from dual union all
select 'define APEX_RELEASE=''&apxver.'';' from dual union all
select ' ' from dual union all
select 'set echo off feedback off verify off' from dual union all
select ' ' from dual union all
select 'define LOG_DIR='||chr(38)||'1.;' from dual union all
select 'spool '||chr(38)||'LOG_DIR.\'||chr(38)||'SCR_NAME..log' from dual union all
select ' ' from dual union all
select '-- log run to table' from dual union all
select 'update "APEX_WWS"."APX$UPDLOG" set "DESCRIPTION" = ''WWS-Web Upgrade Tasks for APEX '||chr(38)||'apxver.: Running: '||chr(38)||'SQL_SCR.'';' from dual union all
select 'commit;' from dual union all
select ' ' from dual union all
select 'set echo off' from dual union all
select ' ' from dual union all
select 'declare' from dual union all
select 'l_errm varchar2(2000);' from dual union all
select 'begin' from dual union all
select ' ' from dual union all
select '  -------------------------------------------------------------------------------------' from dual union all
select '  -- Set Security Group ID' from dual union all
select '  for c1 in (select workspace_id' from dual union all
select '             from apex_workspaces' from dual union all
select '             where workspace = ''APEX_WWS'') loop' from dual union all
select '    apex_util.set_security_group_id( c1.workspace_id );' from dual union all
select '    exit;' from dual union all
select '  end loop;' from dual union all
--------------------------------------------------------------------------------
-- SubQueries
select sql_str
from (
    select sort_id, application_id, sql_str from (
    select 0 as sort_id, APPLICATION_ID, chr(10)||'  -------------------------------------------------------------------------------------'||chr(10)||
                                                  '  -- Applikation: '|| APPLICATION_ID||' Workspace: '|| WORKSPACE || chr(10)  as sql_str from apps union all
    select 1 as sort_id, APPLICATION_ID, '  begin' from apps union all
    select 2 as sort_id, APPLICATION_ID, '    wwv_flow_imp.import_begin (' from apps union all
    select 3 as sort_id, APPLICATION_ID, '    p_version_yyyy_mm_dd=>'''||chr(38)||'APEX_VERSION_DATE.''' from apps union all
    select 4 as sort_id, APPLICATION_ID, '   ,p_release=>'''||chr(38)||'APEX_RELEASE.''' from apps union all
    select 5 as sort_id, APPLICATION_ID, '   ,p_default_workspace_id=>&ws_id.' from apps union all
    select 6 as sort_id, APPLICATION_ID, '   ,p_default_application_id=>'||APPLICATION_ID from apps union all
    select 7 as sort_id, APPLICATION_ID, '   ,p_default_id_offset=>1408275657627430 + '|| APPLICATION_ID from apps union all
    select 8 as sort_id, APPLICATION_ID, '   ,p_default_owner=>''APEX_WWS''' from apps union all
    select 9 as sort_id, APPLICATION_ID, '   );' from apps union all
    select 10 as sort_id, APPLICATION_ID, '  end;' from apps union all
    select 11 as sort_id, APPLICATION_ID, ' ' from apps
    order by application_id, sort_id)
    union all
    --Application Process Header
    select sort_id, application_id, sql_str
    from (
    select rownum + 11 as sort_id, a.APPLICATION_ID, replace(c.sql_str, '#APP_ID#', a.APPLICATION_ID) as sql_str
    from prc_code c, apps a
    order by 1, a.APPLICATION_ID
    ) order by application_id, sort_id
)
union all
select ' -------------------------------------------------------------------------------' from dual;
select ' commit;' from dual;
select ' ' from dual;
select ' exception when others then rollback;' from dual;
select '    l_errm := substr(SQLERRM, 1, 2000);' from dual union all
select '    -- log run to table' from dual union all
select '    update "APEX_WWS"."APX$UPDLOG"' from dual union all
select '    set "RUN_STATUS" = ''ERROR'',' from dual union all
select '        "DESCRIPTION" = "DESCRIPTION"|| '' Task failed with: ''||l_errm;' from dual union all
select '    commit;' from dual union all
select '  raise;' from dual union all
select 'end;' from dual union all
select '/' from dual union all
select ' ' from dual union all
select 'spool off' from dual union all
select ' ' from dual;

spool off

set termout on
-------------------------------------------------------------------------------
-- run Outputfile
set echo off
PROMPT 6.) &RUN_DIR.\&SCR_NAME.
PROMPT
@@&RUN_DIR.\&SCR_NAME. &LOG_DIR.

-- Logging after run
delete from "APEX_WWS"."APX$APP_PROCESSES_AFTER" where application_id = 1000;

insert into "APEX_WWS"."APX$APP_PROCESSES_AFTER"
(select * from "APEX_WWS"."APX$APP_PROCESSES_V" where application_id = 1000);

-- Logging compare
insert into "APEX_WWS"."APX$APP_PROCESSES_COMPARE"
(select * from "APEX_WWS"."APX$APP_PROCESSES_COMPARE_V" where application_id_b = 1000 or application_id_a = 1000);

commit;


-------------------------------------------------------------------------------- 
-- APEX_WWS_TextMessagesForMenu1000.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

--------------------------------------------------------------------------------
-- Logging
delete from "APEX_WWS"."APX$APP_TEXT_MESSAGES_BEFORE" where application_id = 1000;
insert into "APEX_WWS"."APX$APP_TEXT_MESSAGES_BEFORE"
(select * from "APEX_WWS"."APX$APP_TEXT_MESSAGES_V" where application_id = 1000);
commit;

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as DUSR!!!';
begin
  if user != 'DUSR'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_TextMessagesForMenu1000
-- define SQL_SCR=&SCR_NAME..sql

-------------------------------------------------------------------------------
PROMPT Running: &SCR_NAME.
PROMPT Apex Workspace: &ws. Workspace ID: &ws_id. Apex Host: &apxhost.
PROMPT Apex Schema: &apxusr. Apex Version: &apxver. Release Date: &release_date.
PROMPT

-- create Output File
spool &LOG_DIR.\&SCR_NAME..log

-- log run to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

set echo off

--------------------------------------------------------------------------------
-- Creating Text Messages as replacement for Menue Items
declare
l_app_id number := 1000;
l_errm varchar2(2000);
begin
    --
    -- If running from SQL*Plus or SQLcl, we need to set the environment
    -- for the Oracle APEX workspace associated with this schema.
    -- The call to apex_util.set_security_group_id is not necessary if
    -- you're running within the context of the App Builder or an APEX
    -- application.
    --
    for c1 in (select workspace_id
                from apex_workspaces
                where workspace = 'APEX_WWS') loop
            apex_util.set_security_group_id( c1.workspace_id );
            exit;
        end loop;

    for l in (select 'de' as lang from dual union all
            select 'en' as lang from dual) loop
        for m in (
            select TXT_MSG_NAME, LANG, TXT_MSG from (
                -- de
                select 'NEW_LOGO_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Warenwirtschaftssystem' as TXT_MSG from dual union all
                select 'TRACE_OV_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Trace Auswertung (Dialog)' as TXT_MSG from dual union all
                select 'NEW_SESSION_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Seite in neuem Tab öffnen (mit neuer Session)' as TXT_MSG from dual union all
                select 'SIGN_OUT_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Abmelden' as TXT_MSG from dual union all
                select 'HELP_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Hilfe' as TXT_MSG from dual union all
                select 'NO_FAV_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Für die aktuelle Seite kann kein Favorit gesetzt werden.' as TXT_MSG from dual union all
                select 'DIALOG_SEARCH_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Dialog suchen' as TXT_MSG from dual union all
                select 'FAV_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Favorit für die aktuelle Seite' as TXT_MSG from dual union all
                select 'PDF_REPORT_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Meine PDF-Reports' as TXT_MSG from dual union all
                select 'DARK_THEME_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Dunkel' as TXT_MSG from dual union all
                select 'LIGHT_THEME_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Hell' as TXT_MSG from dual union all
                select 'SELECT_ATLEAST_ONE_ROW_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Bitte mindestens einen Datensatz auswählen.' as TXT_MSG from dual union all
                select 'DELETE_ROWS_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Wollen Sie wirklich die markierten Datensätze löschen?' as TXT_MSG from dual union all
                select 'SUCCESS_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Änderungen gespeichert.' as TXT_MSG from dual union all
                --en
                select 'NEW_LOGO_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Enterprise Resource Planning System' as TXT_MSG from dual union all
                select 'TRACE_OV_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Trace Reporting (dialog)' as TXT_MSG from dual union all
                select 'NEW_SESSION_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Open Page in new Tab (with new Session)' as TXT_MSG from dual union all
                select 'SIGN_OUT_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Sign Out' as TXT_MSG from dual union all
                select 'HELP_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Help' as TXT_MSG from dual union all
                select 'NO_FAV_MSG' as TXT_MSG_NAME, 'en' as LANG, 'No favourite can be set for the current page.' as TXT_MSG from dual union all
                select 'DIALOG_SEARCH_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Search dialog' as TXT_MSG from dual union all
                select 'FAV_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Favourite for the current page' as TXT_MSG from dual union all
                select 'PDF_REPORT_MSG' as TXT_MSG_NAME, 'en' as LANG, 'My PDF reports' as TXT_MSG from dual union all
                select 'DARK_THEME_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Dark' as TXT_MSG from dual union all
                select 'LIGHT_THEME_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Light' as TXT_MSG from dual union all
                select 'SELECT_ATLEAST_ONE_ROW_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Please select at least one data set!' as TXT_MSG from dual union all
                select 'DELETE_ROWS_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Do you really want to delete the selected records?' as TXT_MSG from dual union all
                select 'SUCCESS_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Changes saved.' as TXT_MSG from dual
        ) where lang = l.lang) loop

            -- Locate the ID of the specific message and delete it
            for c1 in (select translation_entry_id
                        from apex_application_translations
                    where application_id = l_app_id
                        and translatable_message = m.TXT_MSG_NAME
                        and language_code = m.LANG) loop
                dbms_output.put_line('Deleting: message app_id => '||l_app_id||', name => '''||m.TXT_MSG_NAME||''', lang => '''||m.LANG||'''');
                apex_lang.delete_message(
                    p_id => c1.translation_entry_id );
                --commit;
            end loop;

            dbms_output.put_line('Creating: message app_id => '||l_app_id||', name => '''||m.TXT_MSG_NAME||''', lang => '''||m.LANG||'''');
            -- Create Messages in Repository
            apex_lang.create_message(
                p_application_id     => l_app_id,
                p_name               => m.TXT_MSG_NAME,
                p_language           => m.LANG,
                p_message_text       => m.TXT_MSG,
                p_used_in_javascript => true );

            end loop;
        end loop;
        commit;
exception when others then
    l_errm := substr(SQLERRM, 1, 2000);
    -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = "DESCRIPTION"||'WWS-Web Upgrade Tasks failed with: '||l_errm;
    commit;
  raise;
end;
/

spool off

-------------------------------------------------------------------------------
-- Logging after run
delete from "APEX_WWS"."APX$APP_TEXT_MESSAGES_AFTER" where application_id = 1000;

insert into "APEX_WWS"."APX$APP_TEXT_MESSAGES_AFTER"
(select * from "APEX_WWS"."APX$APP_TEXT_MESSAGES_V" where application_id = 1000);

-- Logging compare
insert into "APEX_WWS"."APX$APP_TEXT_MESSAGES_COMPARE"
(select * from "APEX_WWS"."APX$APP_TEXT_MESSAGES_COMPARE_V" where application_id_b = 1000 or application_id_a = 1000);

commit;


-------------------------------------------------------------------------------- 
-- APEX_WWS_TextMessagesForMenuAll.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

--------------------------------------------------------------------------------
-- Logging
delete from "APEX_WWS"."APX$APP_TEXT_MESSAGES_BEFORE" where application_id <> 1000;
insert into "APEX_WWS"."APX$APP_TEXT_MESSAGES_BEFORE"
(select * from "APEX_WWS"."APX$APP_TEXT_MESSAGES_V" where application_id <> 1000);
commit;

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as DUSR!!!';
begin
  if user != 'DUSR'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_TextMessagesForMenuAll
-- define SQL_SCR=&SCR_NAME..sql

-------------------------------------------------------------------------------
PROMPT Running: &SCR_NAME.
PROMPT Apex Workspace: &ws. Workspace ID: &ws_id. Apex Host: &apxhost.
PROMPT Apex Schema: &apxusr. Apex Version: &apxver. Release Date: &release_date.
PROMPT

-- create Output File
spool &LOG_DIR.\&SCR_NAME..log

-- log to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

set echo off

--------------------------------------------------------------------------------
-- Creating Text Messages as replacement for Menue Items
--
-- Requirements for setting REF_IDs (see below):
-- grant update on APEX_230200.WWV_FLOW_MESSAGES$ to DUSR;
-- can be revoked after upgrade is complete.
--------------------------------------------------------------------------------
declare
l_app_id number;
l_master_app number := 1000;
l_debug boolean := true;
l_errm varchar2(2000);
begin
    --
    -- If running from SQL*Plus or SQLcl, we need to set the environment
    -- for the Oracle APEX workspace associated with this schema.
    -- The call to apex_util.set_security_group_id is not necessary if
    -- you're running within the context of the App Builder or an APEX
    -- application.
    --
    for c1 in (select workspace_id
                from apex_workspaces
                where workspace = 'APEX_WWS') loop
        apex_util.set_security_group_id( c1.workspace_id );
        exit;
    end loop;

    for a in (select application_id from apex_applications
             where workspace = 'APEX_WWS'
             and application_id > l_master_app -- for All
             and (instr(APPLICATION_ID, ',') = 0 and instr(APPLICATION_ID, '.') = 0)
            ) loop

        -- Set APP_ID
        l_app_id := a.application_id;

        for l in (select 'de' as lang from dual union all
                select 'en' as lang from dual) loop
            for m in (
                select TXT_MSG_NAME, LANG, TXT_MSG from (
                    -- de
                select 'NEW_LOGO_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Warenwirtschaftssystem' as TXT_MSG from dual union all
                select 'TRACE_OV_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Trace Auswertung (Dialog)' as TXT_MSG from dual union all
                select 'NEW_SESSION_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Seite in neuem Tab öffnen (mit neuer Session)' as TXT_MSG from dual union all
                select 'SIGN_OUT_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Abmelden' as TXT_MSG from dual union all
                select 'HELP_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Hilfe' as TXT_MSG from dual union all
                select 'NO_FAV_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Für die aktuelle Seite kann kein Favorit gesetzt werden.' as TXT_MSG from dual union all
                select 'DIALOG_SEARCH_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Dialog suchen' as TXT_MSG from dual union all
                select 'FAV_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Favorit für die aktuelle Seite' as TXT_MSG from dual union all
                select 'PDF_REPORT_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Meine PDF-Reports' as TXT_MSG from dual union all
                select 'DARK_THEME_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Dunkel' as TXT_MSG from dual union all
                select 'LIGHT_THEME_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Hell' as TXT_MSG from dual union all
                select 'SELECT_ATLEAST_ONE_ROW_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Bitte mindestens einen Datensatz auswählen.' as TXT_MSG from dual union all
                select 'DELETE_ROWS_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Wollen Sie wirklich die markierten Datensätze löschen?' as TXT_MSG from dual union all
                select 'SUCCESS_MSG' as TXT_MSG_NAME, 'de' as LANG, 'Änderungen gespeichert.' as TXT_MSG from dual union all
                --en
                select 'NEW_LOGO_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Enterprise Resource Planning System' as TXT_MSG from dual union all
                select 'TRACE_OV_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Trace Reporting (dialog)' as TXT_MSG from dual union all
                select 'NEW_SESSION_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Open Page in new Tab (with new Session)' as TXT_MSG from dual union all
                select 'SIGN_OUT_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Sign Out' as TXT_MSG from dual union all
                select 'HELP_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Help' as TXT_MSG from dual union all
                select 'NO_FAV_MSG' as TXT_MSG_NAME, 'en' as LANG, 'No favourite can be set for the current page.' as TXT_MSG from dual union all
                select 'DIALOG_SEARCH_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Search dialog' as TXT_MSG from dual union all
                select 'FAV_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Favourite for the current page' as TXT_MSG from dual union all
                select 'PDF_REPORT_MSG' as TXT_MSG_NAME, 'en' as LANG, 'My PDF reports' as TXT_MSG from dual union all
                select 'DARK_THEME_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Dark' as TXT_MSG from dual union all
                select 'LIGHT_THEME_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Light' as TXT_MSG from dual union all
                select 'SELECT_ATLEAST_ONE_ROW_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Please select at least one data set!' as TXT_MSG from dual union all
                select 'DELETE_ROWS_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Do you really want to delete the selected records?' as TXT_MSG from dual union all
                select 'SUCCESS_MSG' as TXT_MSG_NAME, 'en' as LANG, 'Changes saved.' as TXT_MSG from dual
            ) where lang = l.lang) loop

                -- Locate the ID of the specific message and delete it
                for c1 in (select translation_entry_id, language_code
                            from apex_application_translations
                        where application_id = l_app_id
                            and translatable_message = m.TXT_MSG_NAME
                            and (language_code = m.LANG
                                or language_code = 'en-us')
                            ) loop
                    dbms_output.put_line('Deleting: message app_id => '||l_app_id||', name => '''||m.TXT_MSG_NAME||''', lang => '''||c1.language_code||'''');
                    apex_lang.delete_message(
                        p_id => c1.translation_entry_id );
                    --commit;
                end loop;

                dbms_output.put_line('Creating: message app_id => '||l_app_id||', name => '''||m.TXT_MSG_NAME||''', lang => '''||m.LANG||'''');
                -- Create Messages in Repository
                apex_lang.create_message(
                    p_application_id     => l_app_id,
                    p_name               => m.TXT_MSG_NAME,
                    p_language           => m.LANG,
                    p_message_text       => m.TXT_MSG,
                    p_used_in_javascript => true );

            end loop;
        end loop;
    end loop;
    commit;
exception when others then
    l_errm := substr(SQLERRM, 1, 2000);
    -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = 'WWS-Web Upgrade Tasks failed with: '||l_errm;
    commit;
  raise;
end;
/

-------------------------------------------------------------------------------
-- Setting REF_IDs for new Text Messages
-- Requirements for setting REF_IDs (see below):
-- grant update on APEX_230200.WWV_FLOW_MESSAGES$ to DUSR;
-- can be revoked after upgrade is complete.
declare
l_app_id number;
l_ws_id  number;
l_ref_id number;
l_ver_id number;
l_master_id number := 1000;
l_debug boolean := true;
l_errm varchar2(2000);
begin
    --
    -- If running from SQL*Plus or SQLcl, we need to set the environment
    -- for the Oracle APEX workspace associated with this schema.
    -- The call to apex_util.set_security_group_id is not necessary if
    -- you're running within the context of the App Builder or an APEX
    -- application.
    --
    for c1 in (select workspace_id
                from apex_workspaces
                where workspace = 'APEX_WWS') loop
        apex_util.set_security_group_id( c1.workspace_id );
        l_ws_id := c1.workspace_id;
        exit;
    end loop;

    for m in (    -- get reference_id for master app
        select t.ID, t.FLOW_ID as app_id, t.VERSION_SCN,
            t.message_language as lang, t.name as TXT_MSG_NAME
        from "&CURRENT_APEX_SCHEMA."."WWV_FLOW_MESSAGES$"  t, "&CURRENT_APEX_SCHEMA."."WWV_FLOW_MESSAGES$"  t1
        where t.security_group_id = l_ws_id
        and t.flow_id > l_master_id -- for All
        and (instr(t.flow_id, ',') = 0 and instr(t.flow_id, '.') = 0)
        and t.name = t1.name
        and t.message_language = t1.message_language
        and t1.security_group_id = l_ws_id
        and t1.flow_id = l_master_id
        and (instr(t1.flow_id, ',') = 0 and instr(t1.flow_id, '.') = 0)
        ) loop

            -- Set APP_ID
            l_app_id := m.APP_ID;
            -- Debug
            if l_debug then
                dbms_output.put_line('WS_ID: '||l_ws_id||' APP_ID: '||l_app_id|| ' Message: "'||m.TXT_MSG_NAME||'"');
            end if;

            -- get reference_id for master app
            select t.ID, t.VERSION_SCN
            into l_ref_id, l_ver_id
            from "&CURRENT_APEX_SCHEMA."."WWV_FLOW_MESSAGES$"  t
            where t.security_group_id = l_ws_id
            and t.flow_id = l_master_id
            and t.name = upper(m.TXT_MSG_NAME)
            and t.message_language = m.LANG;

            -- Debug
            if l_debug then
                dbms_output.put_line('REF_ID found for: "'||m.TXT_MSG_NAME||'" => '||l_ref_id||' applying to APP_ID: '||l_app_id);
            end if;

            -- update reference_id and version_scn for new message;
            update "&CURRENT_APEX_SCHEMA."."WWV_FLOW_MESSAGES$" t
            set t.REFERENCE_ID = l_ref_id,
                t.VERSION_SCN  = l_ver_id
            where t.security_group_id = l_ws_id
            and t.flow_id = l_app_id
            and t.name = upper(m.TXT_MSG_NAME)
            and t.message_language = m.LANG;

    end loop;
    commit;

exception when others -- usually no_data_found
    then rollback;
    l_errm := substr(SQLERRM, 1, 2000);
    -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = "DESCRIPTION"||'WWS-Web Upgrade Tasks failed with: '||l_errm;
    commit;
  raise;
end;
/

spool off

-------------------------------------------------------------------------------
-- Logging after run
delete from "APEX_WWS"."APX$APP_TEXT_MESSAGES_AFTER" where application_id <> 1000;

insert into "APEX_WWS"."APX$APP_TEXT_MESSAGES_AFTER"
(select * from "APEX_WWS"."APX$APP_TEXT_MESSAGES_V" where application_id <> 1000);

-- Logging compare
insert into "APEX_WWS"."APX$APP_TEXT_MESSAGES_COMPARE"
(select * from "APEX_WWS"."APX$APP_TEXT_MESSAGES_COMPARE_V" where application_id_b <> 1000 or application_id_a <> 1000);

commit;


-------------------------------------------------------------------------------- 
-- APEX_WWS_UpdateAllTranslations.sql

whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as APEX_WWS!!!';
begin
  if user != 'APEX_WWS'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_UpdateAllTranslations
define SQL_SCR=&SCR_NAME..sql

-- Setting Run_ID, Hostname, APEX Workspace, APEX Schema, Version and Release Date
column rel_date NEW_VALUE release_date NOPRINT
column host_name NEW_VALUE apxhost NOPRINT
column version NEW_VALUE apxver NOPRINT
column schema NEW_VALUE apxschema NOPRINT
column workspace NEW_VALUE ws NOPRINT
column workspace_id NEW_VALUE ws_id NOPRINT
column runid NEW_VALUE run_id NOPRINT
column runusr NEW_VALUE run_usr NOPRINT
column rundate NEW_VALUE run_date NOPRINT
column apex_db_schema NEW_VALUE apxusr NOPRINT
set numformat 09999999999999999
alter session set nls_date_format = 'DD.MM.YYYY HH24:MI';
select run_id as RUNID, run_date as RUNDATE, run_user as RUNUSR, run_host as HOST_NAME,
       apex_schema as SCHEMA, apex_version as VERSION, apex_release_date as REL_DATE,
       WORKSPACE_ID, WORKSPACE, APEX_DB_SCHEMA as apex_db_schema
from "APEX_WWS"."APX$UPDLOG";

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

-------------------------------------------------------------------------------
set echo off
PROMPT ========================================================================
PROMPT 13.) Running: &SQL_SCR.
PROMPT Run ID: &run_id. | Run Date: &run_date. | Run User: &run_usr. |
PROMPT Apex Workspace: &ws. | Workspace ID: &ws_id. |
PROMPT Apex Host: &apxhost. | Apex Schema: &apxusr. |
PROMPT Apex Version: &apxver. | Release Date: &release_date. |

-- create Output File
spool &LOG_DIR.\&SCR_NAME..log

-- log to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

set echo off

PROMPT ========================================================================
PROMPT Update Translations for all Applications in Workspace &ws.
PROMPT ========================================================================
-------------------------------------------------------------------------------
-- Update Translations for all APPs
DECLARE
    l_workspace                     VARCHAR2(1000) := 'APEX_WWS';
    l_workspace_id                  NUMBER;
    l_errm                          VARCHAR2(2000);
BEGIN
    l_workspace_id := APEX_UTIL.find_security_group_id (p_workspace => l_workspace);

for a in (select APPLICATION_ID, APPLICATION_NAME
          from apex_applications
          where workspace = l_workspace
          and application_id >= 1000
          order by 1) loop

    dbms_output.put('Refreshing Translation for AppID: '||rpad(a.APPLICATION_ID, 10, ' ') ||' App: '||rpad(a.APPLICATION_NAME, 40, ' '));

    apex_application_install.set_workspace_id (l_workspace_id);
    apex_util.set_security_group_id (l_workspace_id);

    -- Seed the translateable texts into translated application
    apex_lang.seed_translations (p_application_id             => a.APPLICATION_ID
                                ,p_language                   => 'en'
                                );

    -- Now, publish the translated version of the application
    apex_lang.publish_application (p_application_id             => a.APPLICATION_ID
                                  ,p_language                   => 'en'
                                  );
    dbms_output.put_line('...Done');
    COMMIT;

end loop;
exception when others then
    l_errm := substr(SQLERRM, 1, 2000);
    -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = "DESCRIPTION"||' Task failed with: '||l_errm;
    commit;
  raise;
end;
/

spool off

exit sql.sqlcode;

-------------------------------------------------------------------------------- 
-- APEX_WWS_UpdateDesktopNavigationBar1000.sql

-------------------------------------------------------------------------------------
-- Update application 1000 Desktop Navigation Bar and set entry texts to TEXT_MESSAGES.
-- Afterwards update all other applications Desktop Navigation Bar Entries.
-- Script date: 08.02.2024 17:33:03 - created on: DEWWSDEV05 - created by: DUSR
-- Add DUSR as a parsing schema to Workspace APEX_WWS and run this script as DUSR
-------------------------------------------------------------------------------------
whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

-------------------------------------------------------------------------------
-- Requirements:

-- GRANT UPDATE ("NAV_BAR_LIST_ID", "LAST_UPDATED_ON", "LAST_UPDATED_BY", "SHARED_COMPONENTS_SCN")
-- ON "APEX_230200"."WWV_FLOWS" TO "DUSR";
-- GRANT UPDATE, INSERT ON "APEX_230200"."WWV_FLOW_LIST_ITEMS" TO DUSR;
-- GRANT UPDATE, INSERT ON "APEX_230200"."WWV_FLOW_LISTS" TO DUSR;
-- GRANT UPDATE ON "APEX_230200"."WWV_FLOW_MESSAGES$" TO DUSR;
-- GRANT INSERT ON "APEX_230200"."WWV_FLOW_BUILDER_AUDIT_TRAIL" TO DUSR;
-- GRANT EXECUTE ON "APEX_230200"."WWV_FLOW_AUDIT" TO DUSR;

-------------------------------------------------------------------------------
-- Logging
delete from "APEX_WWS"."APX$APP_LIST_ENTRIES_BEFORE" where application_id = 1000;

insert into "APEX_WWS"."APX$APP_LIST_ENTRIES_BEFORE"
(select * from "APEX_WWS"."APX$APP_LIST_ENTRIES_V" where application_id = 1000);

commit;

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as DUSR!!!';
begin
  if user != 'DUSR'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_UpdateDesktopNavigationBar1000
define SQL_SCR=&SCR_NAME..sql

-------------------------------------------------------------------------------
PROMPT Running: &SCR_NAME.
PROMPT Apex Workspace: &ws. Workspace ID: &ws_id. Apex Host: &apxhost.
PROMPT Apex Schema: &apxusr. Apex Version: &apxver. Release Date: &release_date.
PROMPT

-- create Output File
spool &LOG_DIR.\&SCR_NAME..log

-- log to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

set echo off

--------------------------------------------------------------------------------
-- Update Desktop Navigation Bar for App 1000 and set TEXT_MESSAGES
declare
l_workspace_id     number;
l_list_id1000      number;
l_list_id1100      number;
l_new_list_id1000  number;
l_list_parent_id   number;
l_list_name        varchar2(255) := 'Desktop Navigation Bar';
l_ts               varchar2(20) := to_char(sysdate, 'DDMMYYYYHH24MISS');
l_errm             varchar2(2000);
begin

    -- get workspace ID
    for w in (select workspace_id from apex_workspaces where workspace = 'APEX_WWS') loop
      l_workspace_id := w.workspace_id;
      exit;
    end loop;

    -- get ID of Desktop Navigation Bar
    for l in (select l1.ID as ID1000, l2.ID as ID1100
            from "APEX_230200"."WWV_FLOW_LISTS" l1,
                 "APEX_230200"."WWV_FLOW_LISTS" l2
            where l1.SECURITY_GROUP_ID = l_workspace_id
            and l1.flow_id = 1000
            and l1.name = l_list_name
            and l2.SECURITY_GROUP_ID = l_workspace_id
            and l2.flow_id = 1100
            and l2.name = l_list_name) loop
        l_list_id1000     := l.ID1000;
        l_list_id1100     := l.ID1100;
        exit;
    end loop;

    -- rename App1000 Desktop Navigation Bar
    dbms_output.put_line('Running: update "WWV_FLOW_LISTS" for app 1000 => rename from: "'||l_list_name||'" to: "'||l_list_name ||' Default ('||l_ts||')"');
    update "APEX_230200"."WWV_FLOW_LISTS" l
    set l.NAME = l_list_name || ' Default ('||l_ts||')'
    where l.ID = l_list_id1000;

    -- copy Desktop Navigation Bar from App 1100
    dbms_output.put_line('Running: insert into "WWV_FLOW_LISTS" => LIST values from ID: (1100.'||l_list_id1100||') Name: "'||l_list_name||'"');
    l_new_list_id1000 := wwv_flow_id.next_val;
    insert into "APEX_230200"."WWV_FLOW_LISTS" l1
    (select l_new_list_id1000 as ID, 1000 as FLOW_ID, l2.NAME, l2.LIST_TYPE, l2.LIST_LANGUAGE, l2.LIST_QUERY,
            l2.LIST_STATUS, l2.LIST_DISPLAYED, l2.DISPLAY_ROW_TEMPLATE_ID, l2.REQUIRED_PATCH,
            null as REFERENCE_ID, l2.SECURITY_GROUP_ID, null as LAST_UPDATED_BY, null as LAST_UPDATED_ON,
            user as CREATED_BY, sysdate as CREATED_ON, l2.LIST_COMMENT
     from "APEX_230200"."WWV_FLOW_LISTS" l2
     where l2.ID = l_list_id1100);

    -- copy list entries from App1100 to App1000
    dbms_output.put_line('Running: insert into "WWV_FLOW_LIST_ITEMS" => LIST_ITEMS from LIST: 1100.'||l_list_id1100);
    insert into "APEX_230200"."WWV_FLOW_LIST_ITEMS" l1
    (select wwv_flow_id.next_val as ID, l_new_list_id1000 as LIST_ID, 1000 as FLOW_ID,
       l2.SUB_ITEM_COUNT, l2.PARENT_LIST_ITEM_ID, l2.LIST_ITEM_TYPE, l2.LIST_ITEM_STATUS, l2.ITEM_DISPLAYED,
       l2.LIST_ITEM_DISPLAY_SEQUENCE, l2.LIST_ITEM_LINK_TEXT, l2.LIST_ITEM_LINK_TARGET, l2.LIST_ITEM_ICON, l2.LIST_ITEM_ICON_ATTRIBUTES,
       l2.LIST_ITEM_ICON_ALT_ATTRIBUTE, l2.LIST_ITEM_ICON_EXP, l2.LIST_ITEM_ICON_EXP_ATTR, l2.LIST_ITEM_OWNER, l2.LIST_ITEM_CURRENT_FOR_PAGES,
       l2.LIST_ITEM_CURRENT_TYPE, l2.LIST_ITEM_CURRENT_LANGUAGE, l2.LIST_ITEM_DISP_COND_TYPE, l2.LIST_ITEM_DISP_CONDITION, l2.LIST_ITEM_DISP_COND_TYPE2,
       l2.LIST_ITEM_DISP_CONDITION2, l2.LIST_COUNTCLICKS_Y_N, l2.LIST_COUNTCLICKS_CAT, l2.LIST_TEXT_01, l2.LIST_TEXT_02, l2.LIST_TEXT_03,
       l2.LIST_TEXT_04, l2.LIST_TEXT_05, l2.LIST_TEXT_06, l2.LIST_TEXT_07, l2.LIST_TEXT_08, l2.LIST_TEXT_09, l2.LIST_TEXT_10, l2.LIST_TEXT_11,
       l2.LIST_TEXT_12, l2.LIST_TEXT_13, l2.LIST_TEXT_14, l2.LIST_TEXT_15, l2.LIST_TEXT_16, l2.LIST_TEXT_17, l2.LIST_TEXT_18, l2.LIST_TEXT_19, l2.LIST_TEXT_20,
       l2.TRANSLATE_LIST_TEXT_Y_N, l2.REQUIRED_PATCH, l2.SECURITY_SCHEME, l2.SECURITY_GROUP_ID, null as LAST_UPDATED_BY, null as LAST_UPDATED_ON, user CREATED_BY,
       sysdate as CREATED_ON, l2.LIST_ITEM_COMMENT, l2.SUB_LIST_ID
       from "APEX_230200"."WWV_FLOW_LIST_ITEMS" l2
       where l2.LIST_ID = l_list_id1100
    );

    -- update NAVBAR_LIST_ID for apps = 1000 to new LIST_ID of App 1000
    dbms_output.put_line('Running: update "WWV_FLOW_LISTS" setting REFERENCE_ID to: ('||l_new_list_id1000||') for all LIST_ITEMS of all Apps other than 1000');
    update "APEX_230200"."WWV_FLOWS" f
    set f."NAV_BAR_LIST_ID" = l_new_list_id1000
    where f.SECURITY_GROUP_ID = l_workspace_id
    and f.id = 1000;


    -- update list item texts for App 1000 to TEXT_MESSAGES
    for m in (
        select 'Seite in neuem Tab öffnen (mit neuer Session)' as old_value, chr(38) || 'APP_TEXT$NEW_SESSION_MSG!RAW.' as new_value from dual union all
        select 'Abmelden' as old_value, chr(38) || 'APP_TEXT$SIGN_OUT_MSG!RAW.' as new_value from dual union all
        select 'Hilfe' as old_value, chr(38) || 'APP_TEXT$HELP_MSG!RAW.' as new_value from dual union all
        select 'Für die aktuelle Seite kann kein Favorit gesetzt werden.' as old_value, chr(38) || 'APP_TEXT$NO_FAV_MSG!RAW.' as new_value from dual union all
        select 'Dialog suchen' as old_value, chr(38) || 'APP_TEXT$DIALOG_SEARCH_MSG!RAW.' as new_value from dual union all
        select 'Favorit für die aktuelle Seite' as old_value, chr(38) || 'APP_TEXT$FAV_MSG!RAW.' as new_value from dual union all
        select 'Meine PDF-Reports' as old_value, chr(38) || 'APP_TEXT$PDF_REPORT_MSG!RAW.' as new_value from dual union all
        select 'Dunkel' as old_value, chr(38) || 'APP_TEXT$DARK_THEME_MSG!RAW.' as new_value from dual union all
        select 'Hell' as old_value, chr(38) || 'APP_TEXT$LIGHT_THEME_MSG!RAW.' as new_value from dual union all
        select 'Trace Auswertung (Dialog)' as old_value, chr(38) || 'APP_TEXT$TRACE_OV_MSG!RAW.' as new_value from dual
    ) loop

        dbms_output.put_line('Running: update "WWV_FLOW_LIST_ITEMS" => LIST_ITEM_LINK_TEXT_NEW => "'||m.new_value||'"');
        dbms_output.put_line('List ID: '||l_new_list_id1000||'                LIST_ITEM_LINK_TEXT_OLD => "'||m.old_value||'"');
        update "APEX_230200"."WWV_FLOW_LIST_ITEMS" e
        set e.LIST_ITEM_LINK_TEXT = m.new_value
        where e.LIST_ID = l_new_list_id1000
        and e.LIST_ITEM_LINK_TEXT = m.old_value;

    end loop;

   -- Update PARENT_IDs for new list
   dbms_output.put_line('Running: update PARENT_LIST_IDs for LIST_NAME => "Desktop Navigation Bar" for:');
   dbms_output.put_line('LIST_ITEM_LINK_TEXT => "About" from LIST_ID: '||l_list_id1100);
    -- Updating Parent_ID for "About"
    for i in (select id, list_id
              from "APEX_230200"."WWV_FLOW_LIST_ITEMS"
              where flow_id = 1000
              and list_id = (select id from "APEX_230200"."WWV_FLOW_LISTS" where flow_id = 1000 and name = 'Desktop Navigation Bar')
              and LIST_ITEM_DISPLAY_SEQUENCE = 100
              and LIST_ITEM_LINK_TEXT = 'About') loop
        l_list_parent_id := i.id;
        l_new_list_id1000 := i.list_id;
        exit;
    end loop;

    update "APEX_230200"."WWV_FLOW_LIST_ITEMS" l1
    set l1.PARENT_LIST_ITEM_ID = l_list_parent_id
    where l1.flow_id = 1000
    and l1.list_id = l_new_list_id1000
    and l1.PARENT_LIST_ITEM_ID =
        (select l2.ID from "APEX_230200"."WWV_FLOW_LIST_ITEMS" l2
                                  where l2.LIST_ID = l_list_id1100
                                    and l2.LIST_ITEM_DISPLAY_SEQUENCE = 100
                                    and l2.LIST_ITEM_LINK_TEXT = 'About');

    dbms_output.put_line('PARENT_LIST_IDs for: "About" => Rows affected: '||SQL%ROWCOUNT);

    -- Updating Parent_ID for "APP_USER" Menu
    for i in (select id, list_id
              from "APEX_230200"."WWV_FLOW_LIST_ITEMS"
              where flow_id = 1000
              and list_id = (select id from "APEX_230200"."WWV_FLOW_LISTS"
                             where flow_id = 1000
                             and name = 'Desktop Navigation Bar')
              and LIST_ITEM_DISPLAY_SEQUENCE = 200
              and LIST_ITEM_LINK_TEXT = chr(38)||'APP_USER.') loop
        l_list_parent_id := i.id;
        l_new_list_id1000 := i.list_id;
        exit;
    end loop;

    -- Update PARENT_IDs
    dbms_output.put_line('Running: update PARENT_LIST_IDs for LIST_NAME => "Desktop Navigation Bar" for: ');
    dbms_output.put_line('LIST_ITEM_LINK_TEXT => "'||chr(38)||'APP_USER." from LIST_ID: '||l_list_id1100);
    update "APEX_230200"."WWV_FLOW_LIST_ITEMS" l1
    set l1.PARENT_LIST_ITEM_ID = l_list_parent_id
    where l1.flow_id = 1000
    and l1.list_id = l_new_list_id1000
    and l1.PARENT_LIST_ITEM_ID =
        (select l2.ID from "APEX_230200"."WWV_FLOW_LIST_ITEMS" l2
                                  where l2.LIST_ID = l_list_id1100
                                    and l2.LIST_ITEM_DISPLAY_SEQUENCE = 200
                                    and l2.LIST_ITEM_LINK_TEXT = chr(38)||'APP_USER.');

    dbms_output.put_line('PARENT_LIST_IDs for: "'||chr(38)||'APP_USER." => Rows affected: '||SQL%ROWCOUNT);

    -- update REF_ID for all apps <> 1000 to LIST_ID of App 1000
    dbms_output.put_line('Running: update "WWV_FLOW_LISTS" setting REFERENCE_ID to: ('||l_new_list_id1000||') for all LIST_ITEMS of all Apps other than 1000');
    update "APEX_230200"."WWV_FLOW_LISTS" l
    set l."REFERENCE_ID" = l_new_list_id1000
    where l.SECURITY_GROUP_ID = l_workspace_id
    and l.flow_id > 1000
    and (instr(l.id, ',') = 0 and instr(l.id, '.') = 0)
    and l.name = 'Desktop Navigation Bar';

    -- update list item texts to TEXT_MESSAGES for all apps <> 1000
    for l in (select id, flow_id from "APEX_230200"."WWV_FLOW_LISTS"
              where SECURITY_GROUP_ID = l_workspace_id
              and FLOW_ID > 1000
              and (instr(ID, ',') = 0 and instr(ID, '.') = 0)
              and name = 'Desktop Navigation Bar') loop
        dbms_output.put_line('Updating LIST_TEXT for App: '||rpad(l.flow_id, 8, ' ') ||' List ID: '||l.id);
        for m in (
            select 'Seite in neuem Tab öffnen (mit neuer Session)' as old_value, chr(38) || 'APP_TEXT$NEW_SESSION_MSG!RAW.' as new_value from dual union all
            select 'Abmelden' as old_value, chr(38) || 'APP_TEXT$SIGN_OUT_MSG!RAW.' as new_value from dual union all
            select 'Hilfe' as old_value, chr(38) || 'APP_TEXT$HELP_MSG!RAW.' as new_value from dual union all
            select 'Für die aktuelle Seite kann kein Favorit gesetzt werden.' as old_value, chr(38) || 'APP_TEXT$NO_FAV_MSG!RAW.' as new_value from dual union all
            select 'Dialog suchen' as old_value, chr(38) || 'APP_TEXT$DIALOG_SEARCH_MSG!RAW.' as new_value from dual union all
            select 'Favorit für die aktuelle Seite' as old_value, chr(38) || 'APP_TEXT$FAV_MSG!RAW.' as new_value from dual union all
            select 'Meine PDF-Reports' as old_value, chr(38) || 'APP_TEXT$PDF_REPORT_MSG!RAW.' as new_value from dual union all
            select 'Dunkel' as old_value, chr(38) || 'APP_TEXT$DARK_THEME_MSG!RAW.' as new_value from dual union all
            select 'Hell' as old_value, chr(38) || 'APP_TEXT$LIGHT_THEME_MSG!RAW.' as new_value from dual
        ) loop

            update "APEX_230200"."WWV_FLOW_LIST_ITEMS" e
            set e.LIST_ITEM_LINK_TEXT = m.new_value
            where e.LIST_ID = l.ID
            and e.LIST_ITEM_LINK_TEXT = m.old_value;

        end loop;
    end loop;

    commit;

exception when others then rollback;
    l_errm := substr(SQLERRM, 1, 2000);
    -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = "DESCRIPTION"||' Task failed with: '||l_errm;
    commit;
  raise;
end;
/

spool off

-------------------------------------------------------------------------------
-- Logging after run
delete from "APEX_WWS"."APX$APP_LIST_ENTRIES_AFTER" where application_id = 1000;

insert into "APEX_WWS"."APX$APP_LIST_ENTRIES_AFTER"
(select * from "APEX_WWS"."APX$APP_LIST_ENTRIES_V" where application_id = 1000);

-- Logging compare
insert into "APEX_WWS"."APX$APP_LIST_ENTRIES_COMPARE"
(select * from "APEX_WWS"."APX$APP_LIST_ENTRIES_COMPARE_V"
 where application_id_b = 1000 or application_id_a = 1000);

commit;


-------------------------------------------------------------------------------- 
-- APEX_WWS_UpdateDesktopNavigationBarOthers.sql

-------------------------------------------------------------------------------------
-- Update application 1000 Desktop Navigation Bar and set entry texts to TEXT_MESSAGES.
-- Afterwards update all other applications Desktop Navigation Bar Entries.
-- Script date: 08.02.2024 17:33:03 - created on: DEWWSDEV05 - created by: DUSR
-- Add DUSR as a parsing schema to Workspace APEX_WWS and run this script as DUSR
-------------------------------------------------------------------------------------
whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

-------------------------------------------------------------------------------
-- Requirements:

-- GRANT UPDATE ("NAV_BAR_LIST_ID", "LAST_UPDATED_ON", "LAST_UPDATED_BY", "SHARED_COMPONENTS_SCN")
-- ON "APEX_230200"."WWV_FLOWS" TO "DUSR";
-- GRANT UPDATE, INSERT ON "APEX_230200"."WWV_FLOW_LIST_ITEMS" TO DUSR;
-- GRANT UPDATE, INSERT ON "APEX_230200"."WWV_FLOW_LISTS" TO DUSR;
-- GRANT UPDATE ON "APEX_230200"."WWV_FLOW_MESSAGES$" TO DUSR;
-- GRANT INSERT ON "APEX_230200"."WWV_FLOW_BUILDER_AUDIT_TRAIL" TO DUSR;
-- GRANT EXECUTE ON "APEX_230200"."WWV_FLOW_AUDIT" TO DUSR;

-------------------------------------------------------------------------------
-- Logging
delete from "APEX_WWS"."APX$APP_LIST_ENTRIES_BEFORE" where application_id = 1000;

insert into "APEX_WWS"."APX$APP_LIST_ENTRIES_BEFORE"
(select * from "APEX_WWS"."APX$APP_LIST_ENTRIES_V" where application_id = 1000);

commit;

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as DUSR!!!';
begin
  if user != 'DUSR'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_UpdateDesktopNavigationBar1000
define SQL_SCR=&SCR_NAME..sql

-------------------------------------------------------------------------------
PROMPT Running: &SCR_NAME.
PROMPT Apex Workspace: &ws. Workspace ID: &ws_id. Apex Host: &apxhost.
PROMPT Apex Schema: &apxusr. Apex Version: &apxver. Release Date: &release_date.
PROMPT

-- create Output File
spool &LOG_DIR.\&SCR_NAME..log

-- log to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

set echo off

--------------------------------------------------------------------------------
-- Update Desktop Navigation Bar for App 1000 and set TEXT_MESSAGES
declare
l_workspace_id     number;
l_list_id1000      number;
l_list_id1100      number;
l_new_list_id1000  number;
l_list_parent_id   number;
l_list_name        varchar2(255) := 'Desktop Navigation Bar';
l_ts               varchar2(20) := to_char(sysdate, 'DDMMYYYYHH24MISS');
l_errm             varchar2(2000);
begin

    -- get workspace ID
    for w in (select workspace_id from apex_workspaces where workspace = 'APEX_WWS') loop
      l_workspace_id := w.workspace_id;
      exit;
    end loop;

    -- get ID of Desktop Navigation Bar
    for l in (select l1.ID as ID1000, l2.ID as ID1100
            from "APEX_230200"."WWV_FLOW_LISTS" l1,
                 "APEX_230200"."WWV_FLOW_LISTS" l2
            where l1.SECURITY_GROUP_ID = l_workspace_id
            and l1.flow_id = 1000
            and l1.name = l_list_name
            and l2.SECURITY_GROUP_ID = l_workspace_id
            and l2.flow_id = 1100
            and l2.name = l_list_name) loop
        l_list_id1000     := l.ID1000;
        l_list_id1100     := l.ID1100;
        exit;
    end loop;
/*
    -- rename App1000 Desktop Navigation Bar
    dbms_output.put_line('Running: update "WWV_FLOW_LISTS" for app 1000 => rename from: "'||l_list_name||'" to: "'||l_list_name ||' Default ('||l_ts||')"');
    update "APEX_230200"."WWV_FLOW_LISTS" l
    set l.NAME = l_list_name || ' Default ('||l_ts||')'
    where l.ID = l_list_id1000;

    -- copy Desktop Navigation Bar from App 1100
    dbms_output.put_line('Running: insert into "WWV_FLOW_LISTS" => LIST values from ID: (1100.'||l_list_id1100||') Name: "'||l_list_name||'"');
    l_new_list_id1000 := wwv_flow_id.next_val;
    insert into "APEX_230200"."WWV_FLOW_LISTS" l1
    (select l_new_list_id1000 as ID, 1000 as FLOW_ID, l2.NAME, l2.LIST_TYPE, l2.LIST_LANGUAGE, l2.LIST_QUERY,
            l2.LIST_STATUS, l2.LIST_DISPLAYED, l2.DISPLAY_ROW_TEMPLATE_ID, l2.REQUIRED_PATCH,
            null as REFERENCE_ID, l2.SECURITY_GROUP_ID, null as LAST_UPDATED_BY, null as LAST_UPDATED_ON,
            user as CREATED_BY, sysdate as CREATED_ON, l2.LIST_COMMENT
     from "APEX_230200"."WWV_FLOW_LISTS" l2
     where l2.ID = l_list_id1100);

    -- copy list entries from App1100 to App1000
    dbms_output.put_line('Running: insert into "WWV_FLOW_LIST_ITEMS" => LIST_ITEMS from LIST: 1100.'||l_list_id1100);
    insert into "APEX_230200"."WWV_FLOW_LIST_ITEMS" l1
    (select wwv_flow_id.next_val as ID, l_new_list_id1000 as LIST_ID, 1000 as FLOW_ID,
       l2.SUB_ITEM_COUNT, l2.PARENT_LIST_ITEM_ID, l2.LIST_ITEM_TYPE, l2.LIST_ITEM_STATUS, l2.ITEM_DISPLAYED,
       l2.LIST_ITEM_DISPLAY_SEQUENCE, l2.LIST_ITEM_LINK_TEXT, l2.LIST_ITEM_LINK_TARGET, l2.LIST_ITEM_ICON, l2.LIST_ITEM_ICON_ATTRIBUTES,
       l2.LIST_ITEM_ICON_ALT_ATTRIBUTE, l2.LIST_ITEM_ICON_EXP, l2.LIST_ITEM_ICON_EXP_ATTR, l2.LIST_ITEM_OWNER, l2.LIST_ITEM_CURRENT_FOR_PAGES,
       l2.LIST_ITEM_CURRENT_TYPE, l2.LIST_ITEM_CURRENT_LANGUAGE, l2.LIST_ITEM_DISP_COND_TYPE, l2.LIST_ITEM_DISP_CONDITION, l2.LIST_ITEM_DISP_COND_TYPE2,
       l2.LIST_ITEM_DISP_CONDITION2, l2.LIST_COUNTCLICKS_Y_N, l2.LIST_COUNTCLICKS_CAT, l2.LIST_TEXT_01, l2.LIST_TEXT_02, l2.LIST_TEXT_03,
       l2.LIST_TEXT_04, l2.LIST_TEXT_05, l2.LIST_TEXT_06, l2.LIST_TEXT_07, l2.LIST_TEXT_08, l2.LIST_TEXT_09, l2.LIST_TEXT_10, l2.LIST_TEXT_11,
       l2.LIST_TEXT_12, l2.LIST_TEXT_13, l2.LIST_TEXT_14, l2.LIST_TEXT_15, l2.LIST_TEXT_16, l2.LIST_TEXT_17, l2.LIST_TEXT_18, l2.LIST_TEXT_19, l2.LIST_TEXT_20,
       l2.TRANSLATE_LIST_TEXT_Y_N, l2.REQUIRED_PATCH, l2.SECURITY_SCHEME, l2.SECURITY_GROUP_ID, null as LAST_UPDATED_BY, null as LAST_UPDATED_ON, user CREATED_BY,
       sysdate as CREATED_ON, l2.LIST_ITEM_COMMENT, l2.SUB_LIST_ID
       from "APEX_230200"."WWV_FLOW_LIST_ITEMS" l2
       where l2.LIST_ID = l_list_id1100
    );

    -- update NAVBAR_LIST_ID for apps = 1000 to new LIST_ID of App 1000
    dbms_output.put_line('Running: update "WWV_FLOW_LISTS" setting REFERENCE_ID to: ('||l_new_list_id1000||') for all LIST_ITEMS of all Apps other than 1000');
    update "APEX_230200"."WWV_FLOWS" f
    set f."NAV_BAR_LIST_ID" = l_new_list_id1000
    where f.SECURITY_GROUP_ID = l_workspace_id
    and f.id = 1000;


    -- update list item texts for App 1000 to TEXT_MESSAGES
    for m in (
        select 'Seite in neuem Tab öffnen (mit neuer Session)' as old_value, chr(38) || 'APP_TEXT$NEW_SESSION_MSG!RAW.' as new_value from dual union all
        select 'Abmelden' as old_value, chr(38) || 'APP_TEXT$SIGN_OUT_MSG!RAW.' as new_value from dual union all
        select 'Hilfe' as old_value, chr(38) || 'APP_TEXT$HELP_MSG!RAW.' as new_value from dual union all
        select 'Für die aktuelle Seite kann kein Favorit gesetzt werden.' as old_value, chr(38) || 'APP_TEXT$NO_FAV_MSG!RAW.' as new_value from dual union all
        select 'Dialog suchen' as old_value, chr(38) || 'APP_TEXT$DIALOG_SEARCH_MSG!RAW.' as new_value from dual union all
        select 'Favorit für die aktuelle Seite' as old_value, chr(38) || 'APP_TEXT$FAV_MSG!RAW.' as new_value from dual union all
        select 'Meine PDF-Reports' as old_value, chr(38) || 'APP_TEXT$PDF_REPORT_MSG!RAW.' as new_value from dual union all
        select 'Dunkel' as old_value, chr(38) || 'APP_TEXT$DARK_THEME_MSG!RAW.' as new_value from dual union all
        select 'Hell' as old_value, chr(38) || 'APP_TEXT$LIGHT_THEME_MSG!RAW.' as new_value from dual union all
        select 'Trace Auswertung (Dialog)' as old_value, chr(38) || 'APP_TEXT$TRACE_OV_MSG!RAW.' as new_value from dual
    ) loop

        dbms_output.put_line('Running: update "WWV_FLOW_LIST_ITEMS" => LIST_ITEM_LINK_TEXT_NEW => "'||m.new_value||'"');
        dbms_output.put_line('List ID: '||l_new_list_id1000||'                LIST_ITEM_LINK_TEXT_OLD => "'||m.old_value||'"');
        update "APEX_230200"."WWV_FLOW_LIST_ITEMS" e
        set e.LIST_ITEM_LINK_TEXT = m.new_value
        where e.LIST_ID = l_new_list_id1000
        and e.LIST_ITEM_LINK_TEXT = m.old_value;

    end loop;

   -- Update PARENT_IDs for new list
   dbms_output.put_line('Running: update PARENT_LIST_IDs for LIST_NAME => "Desktop Navigation Bar" for:');
   dbms_output.put_line('LIST_ITEM_LINK_TEXT => "About" from LIST_ID: '||l_list_id1100);
    -- Updating Parent_ID for "About"
    for i in (select id, list_id
              from "APEX_230200"."WWV_FLOW_LIST_ITEMS"
              where flow_id = 1000
              and list_id = (select id from "APEX_230200"."WWV_FLOW_LISTS" where flow_id = 1000 and name = 'Desktop Navigation Bar')
              and LIST_ITEM_DISPLAY_SEQUENCE = 100
              and LIST_ITEM_LINK_TEXT = 'About') loop
        l_list_parent_id := i.id;
        l_new_list_id1000 := i.list_id;
        exit;
    end loop;

    update "APEX_230200"."WWV_FLOW_LIST_ITEMS" l1
    set l1.PARENT_LIST_ITEM_ID = l_list_parent_id
    where l1.flow_id = 1000
    and l1.list_id = l_new_list_id1000
    and l1.PARENT_LIST_ITEM_ID =
        (select l2.ID from "APEX_230200"."WWV_FLOW_LIST_ITEMS" l2
                                  where l2.LIST_ID = l_list_id1100
                                    and l2.LIST_ITEM_DISPLAY_SEQUENCE = 100
                                    and l2.LIST_ITEM_LINK_TEXT = 'About');

    dbms_output.put_line('PARENT_LIST_IDs for: "About" => Rows affected: '||SQL%ROWCOUNT);

    -- Updating Parent_ID for "APP_USER" Menu
    for i in (select id, list_id
              from "APEX_230200"."WWV_FLOW_LIST_ITEMS"
              where flow_id = 1000
              and list_id = (select id from "APEX_230200"."WWV_FLOW_LISTS"
                             where flow_id = 1000
                             and name = 'Desktop Navigation Bar')
              and LIST_ITEM_DISPLAY_SEQUENCE = 200
              and LIST_ITEM_LINK_TEXT = chr(38)||'APP_USER.') loop
        l_list_parent_id := i.id;
        l_new_list_id1000 := i.list_id;
        exit;
    end loop;

    -- Update PARENT_IDs
    dbms_output.put_line('Running: update PARENT_LIST_IDs for LIST_NAME => "Desktop Navigation Bar" for: ');
    dbms_output.put_line('LIST_ITEM_LINK_TEXT => "'||chr(38)||'APP_USER." from LIST_ID: '||l_list_id1100);
    update "APEX_230200"."WWV_FLOW_LIST_ITEMS" l1
    set l1.PARENT_LIST_ITEM_ID = l_list_parent_id
    where l1.flow_id = 1000
    and l1.list_id = l_new_list_id1000
    and l1.PARENT_LIST_ITEM_ID =
        (select l2.ID from "APEX_230200"."WWV_FLOW_LIST_ITEMS" l2
                                  where l2.LIST_ID = l_list_id1100
                                    and l2.LIST_ITEM_DISPLAY_SEQUENCE = 200
                                    and l2.LIST_ITEM_LINK_TEXT = chr(38)||'APP_USER.');

    dbms_output.put_line('PARENT_LIST_IDs for: "'||chr(38)||'APP_USER." => Rows affected: '||SQL%ROWCOUNT);
*/

    -- update REF_ID for all apps <> 1000 to LIST_ID of App 1000
    dbms_output.put_line('Running: update "WWV_FLOW_LISTS" setting REFERENCE_ID to: ('||l_new_list_id1000||') for all LIST_ITEMS of all Apps other than 1000');
    update "APEX_230200"."WWV_FLOW_LISTS" l
    set l."REFERENCE_ID" = l_new_list_id1000
    where l.SECURITY_GROUP_ID = l_workspace_id
    and l.flow_id > 1000
    and (instr(l.id, ',') = 0 and instr(l.id, '.') = 0)
    and l.name = 'Desktop Navigation Bar';

    -- update list item texts to TEXT_MESSAGES for all apps <> 1000
    for l in (select id, flow_id from "APEX_230200"."WWV_FLOW_LISTS"
              where SECURITY_GROUP_ID = l_workspace_id
              and FLOW_ID > 1000
              and (instr(ID, ',') = 0 and instr(ID, '.') = 0)
              and name = 'Desktop Navigation Bar') loop
        dbms_output.put_line('Updating LIST_TEXT for App: '||rpad(l.flow_id, 8, ' ') ||' List ID: '||l.id);
        for m in (
            select 'Seite in neuem Tab öffnen (mit neuer Session)' as old_value, chr(38) || 'APP_TEXT$NEW_SESSION_MSG!RAW.' as new_value from dual union all
            select 'Abmelden' as old_value, chr(38) || 'APP_TEXT$SIGN_OUT_MSG!RAW.' as new_value from dual union all
            select 'Hilfe' as old_value, chr(38) || 'APP_TEXT$HELP_MSG!RAW.' as new_value from dual union all
            select 'Für die aktuelle Seite kann kein Favorit gesetzt werden.' as old_value, chr(38) || 'APP_TEXT$NO_FAV_MSG!RAW.' as new_value from dual union all
            select 'Dialog suchen' as old_value, chr(38) || 'APP_TEXT$DIALOG_SEARCH_MSG!RAW.' as new_value from dual union all
            select 'Favorit für die aktuelle Seite' as old_value, chr(38) || 'APP_TEXT$FAV_MSG!RAW.' as new_value from dual union all
            select 'Meine PDF-Reports' as old_value, chr(38) || 'APP_TEXT$PDF_REPORT_MSG!RAW.' as new_value from dual union all
            select 'Dunkel' as old_value, chr(38) || 'APP_TEXT$DARK_THEME_MSG!RAW.' as new_value from dual union all
            select 'Hell' as old_value, chr(38) || 'APP_TEXT$LIGHT_THEME_MSG!RAW.' as new_value from dual
        ) loop

            update "APEX_230200"."WWV_FLOW_LIST_ITEMS" e
            set e.LIST_ITEM_LINK_TEXT = m.new_value
            where e.LIST_ID = l.ID
            and e.LIST_ITEM_LINK_TEXT = m.old_value;

        end loop;
    end loop;

    commit;

exception when others then rollback;
    l_errm := substr(SQLERRM, 1, 2000);
    -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = "DESCRIPTION"||' Task failed with: '||l_errm;
    commit;
  raise;
end;
/

spool off

-------------------------------------------------------------------------------
-- Logging after run
delete from "APEX_WWS"."APX$APP_LIST_ENTRIES_AFTER" where application_id = 1000;

insert into "APEX_WWS"."APX$APP_LIST_ENTRIES_AFTER"
(select * from "APEX_WWS"."APX$APP_LIST_ENTRIES_V" where application_id = 1000);

-- Logging compare
insert into "APEX_WWS"."APX$APP_LIST_ENTRIES_COMPARE"
(select * from "APEX_WWS"."APX$APP_LIST_ENTRIES_COMPARE_V"
 where application_id_b = 1000 or application_id_a = 1000);

commit;


-------------------------------------------------------------------------------- 
-- APEX_WWS_UpdateLogoText.sql

-------------------------------------------------------------------------------------
-- Update all application logo texts to TEXT_MESSAGE.
-- Script date: 08.02.2024 17:33:03 - created on: DEWWSDEV05 - created by: DUSR
-- Add DUSR as a parsing schema to Workspace APEX_WWS and run this script as DUSR
-------------------------------------------------------------------------------------
whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit failure
set serveroutput on size unlimited
set pages 0
set line 1000
set trimspool on
set define on
set feedback off verify off echo off

-------------------------------------------------------------------------------
-- Requirements:

-- GRANT UPDATE ("LOGO_TEXT") ON "APEX_230200"."WWV_FLOWS" TO "DUSR";

-------------------------------------------------------------------------------
-- Logging
delete from "APEX_WWS"."APX$APP_LOGO_TEXT_BEFORE";

insert into "APEX_WWS"."APX$APP_LOGO_TEXT_BEFORE"
(select * from "APEX_WWS"."APX$APP_LOGO_TEXT_V");

commit;

--------------------------------------------------------------------------------
-- APEX DB Schema
define CURRENT_APEX_SCHEMA='&apxusr.';

--------------------------------------------------------------------------------
-- !!! runas DUSR !!!
declare l_msg varchar2(1000) := 'This script must be run as DUSR!!!';
begin
  if user != 'DUSR'
    then
    dbms_output.put_line(chr(10)||'PLS-20001: '|| l_msg);
    raise_application_error(-20001, l_msg);
  end if;
end;
/

-------------------------------------------------------------------------------
-- Output Directories
define MAIN_DIR=&1.
define RUN_DIR=&1.\RUN
define LOG_DIR=&1.\LOG
-- Output File
define SCR_NAME=APEX_WWS_UpdateLogoText
define SQL_SCR=&SCR_NAME..sql

-------------------------------------------------------------------------------
PROMPT Running: &SCR_NAME.
PROMPT Apex Workspace: &ws. Workspace ID: &ws_id. Apex Host: &apxhost.
PROMPT Apex Schema: &apxusr. Apex Version: &apxver. Release Date: &release_date.
PROMPT

-- create Output File
spool &LOG_DIR.\&SCR_NAME..log

-- log to table
update "APEX_WWS"."APX$UPDLOG"
set "DESCRIPTION" = 'WWS-Web Upgrade Tasks for APEX &apxver.: Running: &SQL_SCR.';
commit;

set echo off

--------------------------------------------------------------------------------
-- Update Desktop Navigation Bar for App 1000 and set TEXT_MESSAGES
declare
l_workspace_id     number;
l_logo_old         varchar2(1000) := 'Warenwirtschaftssystem ';
l_logo_new         varchar2(1000) := chr(38)||'APP_TEXT$NEW_LOGO_MSG!RAW. ';
l_errm             varchar2(2000);
begin
    -- get workspace ID
    for w in (select workspace_id from apex_workspaces where workspace = 'APEX_WWS') loop
      l_workspace_id := w.workspace_id;
      exit;
    end loop;

    for a in (select id, security_group_id, flow_language
              from "APEX_230200"."WWV_FLOWS"
              where id >= 1000
              and SECURITY_GROUP_ID = l_workspace_id
              and FLOW_LANGUAGE = 'de'
              order by id) loop

        -- update LOGO_TEXT for all
        dbms_output.put_line('Running: update "WWV_FLOWS" for app '||rpad(a.id, 8, ' ')||
                             ' => rename Logo Text from: "'||l_logo_old ||'" to: "'||l_logo_new);
        update "APEX_230200"."WWV_FLOWS"
        set LOGO_TEXT = replace("LOGO_TEXT", l_logo_old , l_logo_new )
        where ID = a.id
        and SECURITY_GROUP_ID = a.security_group_id
        and FLOW_LANGUAGE = a.flow_language;

    end loop;

    -- Fix for APP 130100
        dbms_output.put_line('Running: update "WWV_FLOWS" for app 130100  '||
        ' => rename Logo Text from: ">'''||chr(38)||'AI_DB_INSTANCE.<''" to: "''>'||chr(38)||'AI_TNS_NAME.<');
    update "APEX_230200"."WWV_FLOWS"
    set LOGO_TEXT = replace("LOGO_TEXT", '>'||chr(38)||'AI_DB_INSTANCE.<', '>'||chr(38)||'AI_TNS_NAME.<')
    where ID = 130100
    and SECURITY_GROUP_ID = l_workspace_id
    and FLOW_LANGUAGE = 'de';

    commit;

exception when others then rollback;
    l_errm := substr(SQLERRM, 1, 2000);
    -- log run to table
    update "APEX_WWS"."APX$UPDLOG"
    set "RUN_STATUS" = 'ERROR',
        "DESCRIPTION" = "DESCRIPTION"||' Task failed with: '||l_errm;
    commit;
  raise;
end;
/

spool off

-------------------------------------------------------------------------------
-- Logging after run
delete from "APEX_WWS"."APX$APP_LOGO_TEXT_AFTER";

insert into "APEX_WWS"."APX$APP_LOGO_TEXT_AFTER"
(select * from "APEX_WWS"."APX$APP_LOGO_TEXT_V");

-- Logging compare
insert into "APEX_WWS"."APX$APP_LOGO_TEXT_COMPARE"
(select * from "APEX_WWS"."APX$APP_LOGO_TEXT_COMPARE_V");

commit;


-------------------------------------------------------------------------------- 
-- _APEX_230200_APX_RUN_ALL.cmd

@echo off
:: Setting Script Variables
set NLS_LANG=GERMAN_GERMANY.UTF8
chcp 65001>nul
:: needed for SQLcl
set JAVA_HOME=C:\app\client\product\23.3.0\sqlcl\jdk-21.0.1\bin
:: SQLcl Environment
set SQL_HOME=C:\app\client\product\23.3.0\sqlcl\bin\
set SQL_BIN=%SQL_HOME%\sql.exe
:: SQL*Plus Environment
set SQL_HOME=C:\app\client\product\19.0.0\client_1\bin
set SQL_BIN=sqlplus.exe
:: Set SQL Command Shell
set SQLC=%SQL_HOME%\%SQL_BIN%
:: Run Environment for SQL
@REM set RUN_ENV=ENTW.ESSEN.DEICHMANN.COM:1521/ENTW
set RUN_ENV=DEWWSDEV01:1521/WWSDEV

:: Script Header and Main Directory
set PWD=..WWS-Web\Upgrade\23.2.3\
@REM set MAIN_PATH=U:\git\WWS\_DSD\Projects\WWS\FORMS_Migration\Systemadministration\APEX_WWS\WWS-Web\Upgrade\23.2.3
@REM pushd %MAIN_PATH%
set SCR_PATH=%CD%
pushd %SCR_PATH%
:: Reset Path
set PATH=.;%SQL_HOME%;%JAVA_HOME%;%PATH%
:: User PWs (set before use and clear from this script after run)
set APXWWSP=
set DUSRP=

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::DUSR precheck
@echo. && @echo Starting %SQL_BIN% with APEX_230200_APX_CHK_PREUPD.sql for DUSR@%RUN_ENV% in %PWD%
%SQLC% -S DUSR/%DUSRP%@%RUN_ENV% @%SCR_PATH%\APEX_230200_APX_CHK_PREUPD.sql %SCR_PATH%
if not %ERRORLEVEL% == 0 goto :end

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: APEX_WWS first
@echo. && @echo Starting %SQL_BIN% with APEX_WWS-Web_PreUpgradeTasks.sql for APEX_WWS@%RUN_ENV% in %PWD%
%SQLC% -S APEX_WWS/%APXWWSP%@%RUN_ENV% @%SCR_PATH%\APEX_WWS-Web_PreUpgradeTasks.sql %SCR_PATH% %username% APEX_WWS
if not [%ERRORLEVEL%] == [0] goto :end

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::DUSR next
@echo. && @echo Starting %SQL_BIN% with APEX_230200_APX_WWS-Web_UpgradeTasks.sql for DUSR@%RUN_ENV% in %PWD%
%SQLC% -S DUSR/%DUSRP%@%RUN_ENV% @%SCR_PATH%\APEX_230200_APX_WWS-Web_UpgradeTasks.sql %SCR_PATH%
if not [%ERRORLEVEL%] == [0] goto :end

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: APEX_WWS last
@echo. && @echo Starting %SQL_BIN% with APEX_WWS_UpdateAllTranslations.sql for APEX_WWS@%RUN_ENV% in %PWD%
%SQLC% -S APEX_WWS/%APXWWSP%@%RUN_ENV% @%SCR_PATH%\APEX_WWS_UpdateAllTranslations.sql %SCR_PATH%
if not [%ERRORLEVEL%] == [0] goto :end

:: and cleanup
@echo. && @echo Starting %SQL_BIN% with APEX_WWS-Web_PostUpgradeTasks.sql for APEX_WWS@%RUN_ENV% in %PWD%
%SQLC% -S APEX_WWS/%APXWWSP%@%RUN_ENV% @%SCR_PATH%\APEX_WWS-Web_PostUpgradeTasks.sql %SCR_PATH%
if not [%ERRORLEVEL%] == [0] goto :end

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: close run
:end
:: Move back to Root
popd

@echo.Script "%~0" returned with ERRORLEVEL: [%ERRORLEVEL%]
